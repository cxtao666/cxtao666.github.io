<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢乐涌动</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-23T16:30:02.846Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cxtao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git的使用</title>
    <link href="http://yoursite.com/2020/04/24/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/04/24/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-23T16:29:23.000Z</published>
    <updated>2020-04-23T16:30:02.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的简单介绍"><a href="#git的简单介绍" class="headerlink" title="git的简单介绍"></a>git的简单介绍</h2><p>git是分布式版本控制工具</p><h2 id="git-的基本操作指令"><a href="#git-的基本操作指令" class="headerlink" title="git 的基本操作指令"></a>git 的基本操作指令</h2><h3 id="git的初始化操作"><a href="#git的初始化操作" class="headerlink" title="git的初始化操作"></a>git的初始化操作</h3><p><code>git init</code><br>初始化git仓库</p><p><code>git add 文件名</code></p><p><code>git add .</code></p><p>把文件 添加到 git 暂存区中</p><p><code>git status</code></p><p>查看git 的状态</p><p>出现红色说明有文件，修改了但还没提交到暂存区</p><p><code>git  diff</code>查看修改了哪些文件   增加了哪些行，删除了那些行</p><p><code>git  diff    --cached</code> 查看修改了那些文件</p><p>查看的是修改是暂存区的修改和修改了但未暂存之间的对比</p><p><code>git  commit -m “文字描述”</code>     将暂存区的数据提交到本地仓库</p><p><code>git rm  -f</code> 强制删除  暂存区中的 文件   （会把文件从磁盘一并删除）    有数据，但更改的数据还没放到本地仓库</p><p><code>git rm  文件名</code>    删除文件(会把文件从磁盘一并删除)    暂存区数据已经提交到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached   将数据从仓库中删除（或）暂存区中删除，但不会删除磁盘的文件</span><br></pre></td></tr></table></figure><p>cached 缓存</p><p><code>git  log</code>  查看  git 的  版本提交信息 </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv README.md README</span><br></pre></td></tr></table></figure><p>对文件进行改名操作</p><p>取消工作区做的修改，让工作区的文件和暂存区的文件内容一样，消除git diff的差异</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>将已提交到暂存区的文件撤销为未暂存状态</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>使用git status 就可以查看下面操作的可选命令</p><p><code>git reset  --hard  commit号</code></p><p>返回上一个提交的版本</p><h3 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h3><p><code>git checkout -b dev</code></p><p>创建并切换dev分支</p><p><code>git branch dev  创建dev分支</code></p><p><code>git branch</code></p><p>查看当前所属分支</p><p><code>git  checkout master  切换到master分支</code></p><p><code>git merge  dev  合并分支</code></p><p>合并后就有dev分支上提交的版本信息</p><p><code>git  branch -d dev</code></p><p>删除dev分支</p><h4 id="合并冲突问题"><a href="#合并冲突问题" class="headerlink" title="合并冲突问题"></a>合并冲突问题</h4><p>先创建一个dev分支  提交</p><p>然后再切换回master分支，再提交</p><p>且2个提交的分支都修改了同一个文件</p><p>然后把dev分支合并到master分支上，产生冲突</p><p>分支切过来是看不到的</p><h3 id="git远程仓库操作"><a href="#git远程仓库操作" class="headerlink" title="git远程仓库操作"></a>git远程仓库操作</h3><p><code>git push origin  分支名</code>   当分支推送到远程</p><p>得推送工作分支上去才行</p><p>推送主分支不行的</p><p><code>git push origin 分支名   --force</code>  强推  嘿嘿</p><p><code>git clone “仓库地址”</code>   把仓库下载到本地</p><p>跟踪远程分支     跟踪完   直接  git  push 就可以了</p><p><code>git  pull  origin  分支名</code></p><p>把远程的分支拉取到本地</p><p>拉下来后，如果远程分支已经做了修改，它就会自动同步远程的代码，并提交一次commit 向本地仓库</p><p><code>git branch --set-upstream-to=origin/smart smart</code>    本地的smart分支跟踪远程的smart分支</p><p>##git 撤销提交的 commit 操作</p><p>写完代码后，我们一般这样</p><p><code>git add .</code>//添加所有文件</p><p><code>git commit -m</code>“本功能全部完成”</p><p>执行完commit后，想撤回commit，怎么办？</p><p>这样凉拌：</p><p><code>git reset --soft HEAD^</code></p><p>这样就成功的撤销了你的commit</p><p>注意，仅仅是撤回commit操作，您写的代码仍然保留。</p><p>说一下个人理解：<br>HEAD^的意思是上一个版本，也可以写成HEAD~1</p><p>如果你进行了2次commit，想都撤回，可以使用HEAD~2</p><p>至于这几个参数：<br>–mixed<br>意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作<br>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><p>–soft<br>不删除工作空间改动代码，撤销commit，不撤销git add . </p><p>–hard<br>删除工作空间改动代码，撤销commit，撤销git add . </p><p>注意完成这个操作后，就恢复到了上一次的commit状态。</p><p>顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：<br><code>git commit --amend</code></p><p>此时会进入默认vim编辑器，修改注释完毕后保存就好了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git的简单介绍&quot;&gt;&lt;a href=&quot;#git的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;git的简单介绍&quot;&gt;&lt;/a&gt;git的简单介绍&lt;/h2&gt;&lt;p&gt;git是分布式版本控制工具&lt;/p&gt;
&lt;h2 id=&quot;git-的基本操作指令&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nust.js初探</title>
    <link href="http://yoursite.com/2020/04/24/nust-js%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2020/04/24/nust-js%E5%88%9D%E6%8E%A2/</id>
    <published>2020-04-23T16:28:37.000Z</published>
    <updated>2020-04-23T16:28:56.277Z</updated>
    
    <content type="html"><![CDATA[<h4 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h4><p><strong>把我个人博客的前端界面部分使用nuxt框架进行服务端渲染</strong></p><h4 id="nuxt介绍"><a href="#nuxt介绍" class="headerlink" title="nuxt介绍"></a>nuxt介绍</h4><p><strong>nuxt可以把spa根据路由将单页面分割成多页面,比起vue的ssr渲染要更容易使用</strong></p><h4 id="nuxt的使用"><a href="#nuxt的使用" class="headerlink" title="nuxt的使用"></a>nuxt的使用</h4><h5 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h5><p><code>npx create-nuxt-app &lt;项目名&gt;</code></p><h5 id="nuxt的目录结构"><a href="#nuxt的目录结构" class="headerlink" title="nuxt的目录结构"></a>nuxt的目录结构</h5><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131142344036-720942694.png" alt=""></p><p>其中layouts目录用于存放APP.vue,将其改名为default.vue,既可使用全局的界面配置,注意得用 <code>&lt;nuxt/&gt;</code>代替<code>&lt;router-view&gt;</code></p><p>nuxt的界面嵌套<br><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131142405828-1131757079.png" alt=""></p><p>pages目录用于存放vue项目的路由页面,nuxt默认情况下根据该目录,对路由进行配置,自动生成路由,所以无特殊情况是不需要自己手动配置路由的</p><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131142416797-305585681.png" alt=""></p><p>components目录用于将vue项目的组件移动到此目录</p><p>plugins目录是插件的使用,例如如果项目使用了element.ui,则需要在该目录下配置,配置方法是在目录下新建elementui.js,并在文件下写入如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> ElementUi <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/display.css'</span></span><br><span class="line">Vue.use(ElementUi);</span><br></pre></td></tr></table></figure><p>同时使用npm安装element-ui插件</p><p>然后在nuxt.config.js文件中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="string">'~/plugins/elementui'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assets文件用于存放需要被webpack打包的图片和css文件</p><p><strong>注意:在使用路径引入图片时需要在路径前面加上~</strong>,<strong>不然会报错</strong></p><p>store文件夹用于存放vuex文件,在文件夹下新建index.js文件,导出方式大概如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">export const state &#x3D; () &#x3D;&gt;(&#123; </span><br><span class="line">  isLogin: false,</span><br><span class="line">  user:&quot;&quot;</span><br><span class="line">&#125;)  &#x2F;&#x2F;state必须是函数才行</span><br><span class="line"></span><br><span class="line">export const  mutations &#x3D; &#123;</span><br><span class="line">  userStatus(state, flag) &#123;</span><br><span class="line">    state.isLogin &#x3D; flag</span><br><span class="line">  &#125;,</span><br><span class="line">  setuser(state,flag)&#123;</span><br><span class="line">    state.user &#x3D; flag;</span><br><span class="line">    window.$cookies.set(&quot;user_session&quot;,&quot;haslogin&quot;,60 * 60 * 24)</span><br><span class="line">  &#125;,</span><br><span class="line">  getuser(state,flag)&#123;</span><br><span class="line"></span><br><span class="line">   var value &#x3D;  window.$cookies.get(&quot;user_session&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(value &#x3D;&#x3D;&#x3D; &quot;haslogin&quot;)&#123;</span><br><span class="line"></span><br><span class="line">      state.isLogin &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> export const actions &#x3D; &#123;</span><br><span class="line">  userLogin(&#123;commit&#125;, flag) &#123;</span><br><span class="line">    commit(&quot;userStatus&quot;, flag)</span><br><span class="line">  &#125;,</span><br><span class="line">  setusername (&#123;commit&#125;,flag)&#123;</span><br><span class="line">    commit(&quot;setuser&quot;,flag)</span><br><span class="line">  &#125;,</span><br><span class="line">  getusername (&#123;commit&#125;,flag)&#123;</span><br><span class="line">    commit(&quot;getuser&quot;,flag)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> export const getters &#x3D; &#123;</span><br><span class="line">  isLogin: state &#x3D;&gt; state.isLogin,</span><br><span class="line">  user:state &#x3D;&gt;state.user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h4><p>nuxt初探先到此,当然还有很多东西没有涉及,像动态路由,中间件的使用,还有vuex项目的使用等等,项目也还没改造完成,所以未完待续</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;项目目标&quot;&gt;&lt;a href=&quot;#项目目标&quot; class=&quot;headerlink&quot; title=&quot;项目目标&quot;&gt;&lt;/a&gt;项目目标&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;把我个人博客的前端界面部分使用nuxt框架进行服务端渲染&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;nuxt
      
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>网络io模型</title>
    <link href="http://yoursite.com/2020/04/24/%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/04/24/%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-04-23T16:18:46.000Z</published>
    <updated>2020-04-23T16:23:15.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作系统基本概念"><a href="#操作系统基本概念" class="headerlink" title="操作系统基本概念"></a>操作系统基本概念</h3><p>首先来来说下操作系统，嗯，<strong>操作系统是计算机硬件的管理软件，是对计算机硬件的抽象</strong>，操作系统将应用程序分为用户态和内核态，例如驱动程序就位于内核态，而我们写的一般程序都是用户态，包括web服务器这些，应用程序无法直接操控硬件，只能通过系统调用，通过操作系统驱动io硬件，通过操作系统管理进程。</p><a id="more"></a><p>接下来说下文件的概念，在操作系统中，文件是对i/o的一种抽象，<strong>文件</strong>大体包括三类</p><p><strong>普通的文件</strong>：包括二进制文件和文本文件</p><p><strong>目录</strong>：就是普通文件的一组链表</p><p><strong>套接字文件</strong>:用来与另一个进程进行跨网络通信的文件</p><p>套接字文件就是通常说的socket，还有值得注意的是无论打开什么文件，内核都会返回给应用程序一个<strong>文件描述符</strong>。当关闭文件后，内核释放资源，同时回收文件描述符。</p><h4 id="进程的内存模型"><a href="#进程的内存模型" class="headerlink" title="进程的内存模型"></a>进程的内存模型</h4><p>每个进程都有独立的上下文，它拥有完整的虚拟内存空间。</p><p>CPU执行进程，总是在不断对进程的切换中，这种叫时分复用，而且时间很快，从而让人有一种进程并行的感觉，即单个cpu在一个时刻只能做一件事</p><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131152720823-2025172513.png" alt=""></p><h3 id="I-O流程"><a href="#I-O流程" class="headerlink" title="I/O流程"></a>I/O流程</h3><p>说下应用程序读文件的大致流程（写文件也差不多），当一个进程想要向磁盘或者接受网络数据时，它会先发起系统调用（可以通过异常等方式），然后将程序控制权交给操作系统，</p><p>操作系统向指定的文件发起读的操作，返回给程序一个文件操作符，然后接下来就是比较有意思的地方了，因为文件读出来是需要时间的，文件读出来后会存到内核的缓冲区中（DMA），然后中断提醒CPU，CPU再由内核缓冲区读取到用户进程中，在这个过程中，这段时间里，用户进程可以有阻塞，非阻塞，同步，异步各种状态</p><h3 id="linux的I-O模型"><a href="#linux的I-O模型" class="headerlink" title="linux的I/O模型"></a>linux的I/O模型</h3><p>网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p><p>第一阶段：等待数据准备 (Waiting for the data to be ready)。  第二阶段：将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)。  </p><p>对于socket流而言，</p><p>第一步：通常涉及等待网络上的数据分组到达，然后被复制到内核的某个缓冲区。  第二步：把数据从内核缓冲区复制到应用进程缓冲区。   </p><h4 id="linux的五种网络i-o模型"><a href="#linux的五种网络i-o模型" class="headerlink" title="linux的五种网络i/o模型"></a>linux的五种网络i/o模型</h4><p>同步的概念就是在数据复制到用户进程的这段时间内，用户进程是不干活</p><p>异步是在这段时间内，用户进程会继续执行它后续的工作</p><p>先在同步异步的基础上进行简单的分类</p><p><strong>同步模型（synchronous IO）</strong></p><ul><li>阻塞IO（bloking IO）</li><li>非阻塞IO（non-blocking IO）</li><li>多路复用IO（multiplexing IO）</li><li>信号驱动式IO（signal-driven IO）</li></ul><p><strong>异步IO（asynchronous IO）</strong></p><p>接下来进行分类的介绍</p><h5 id="阻塞I-O"><a href="#阻塞I-O" class="headerlink" title="阻塞I/O"></a>阻塞I/O</h5><p>阻塞i/o就是整个过程用户进程都是阻塞，它发起系统调用后就被挂起了，直到数据被搬运到缓冲区中，然后数据从缓冲区读进用户进程，它才被唤醒，真个过程它都处于挂起状态（什么都不干）</p><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131152924101-510560621.png" alt=""></p><h5 id="非阻塞i-o"><a href="#非阻塞i-o" class="headerlink" title="非阻塞i/o"></a>非阻塞i/o</h5><p>用户进程发起系统调用后，它没有被挂起，而是继续执行，但它要不断轮询看数据是否运到内核了，数据到了内核后，用户进程将数据从内核读取到用户进程</p><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131153423422-1015880400.png" alt=""></p><h5 id="多路复用I-O"><a href="#多路复用I-O" class="headerlink" title="多路复用I/O"></a>多路复用I/O</h5><p>多路复用I/O比较复杂，它整个过程也是阻塞的，但不同的是它可以阻塞多个i/o，同时阻塞多个socket连接，有epoll,，poll,select等，epoll是linux最高效的，<strong>多路复用的特点是通过一种机制一个进程能同时等待多个IO文件描述符，内核监视这些文件描述符（套接字描述符），其中的任意一个进入读就绪状态，select， poll，epoll函数就可以返回。</strong></p><p>select,poll,epoll都是内核状态的函数调用</p><p><strong>用户进程发起系统调用后，处于挂起状态，同时监听多个socket连接，只要有其中有一个数据到达内核，用户进程就被唤醒工作，然后将数据从内核读取到用户进程，其实就是由epoll，select同时监听多个io对象，当io对象发生变化的时候，就通知用户进程读写数据，进行操作</strong></p><p>即多个io对象复用一个进程，这样可以很充分的利用阻塞的这段时间</p><p>IO多路复用是同步阻塞模式</p><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131153110563-1388062089.png" alt=""></p><h5 id="异步驱动I-O"><a href="#异步驱动I-O" class="headerlink" title="异步驱动I/O"></a>异步驱动I/O</h5><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131153204997-189606878.png" alt=""></p><p>这个理论上是最好的，但在linux系统中很难实现</p><h5 id="信号驱动i-o"><a href="#信号驱动i-o" class="headerlink" title="信号驱动i/o"></a>信号驱动i/o</h5><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131153225562-694302020.png" alt=""></p><p>这个很少使用到</p><h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><p>异步io在linux中很难实现，但也有一种模拟异步io的方法即多线程和同步阻塞io进行模拟，设置一个主线程，用其它线程进行同步io操作，当io完成时通知主线程去读取进程中的数据，进行后续操作，因为是同一个进程，所以可以共享内存资源。进而实现类似异步io的效果，在linux中有libev,libeio这样的异步io实现库，而在windows，则使用了iocp,可以说异步io的核心就是在子线程上执行io操作，在执行完毕后通知调用者提取相关数据。只不过linux是用户层的线程池，而iocp是内核的线程池。</p><h4 id="Node模型"><a href="#Node模型" class="headerlink" title="Node模型"></a>Node模型</h4><p>首先说下常见的模型要么是单进程多线程，要么是多进程单线程，node是属于后者</p><p><img src="https://img2018.cnblogs.com/blog/1580344/202001/1580344-20200131153311504-216331194.png" alt=""></p><p>node中最重的就是包含了libuv这个，node的所有io操作都是通过它来实现的，libuv实现了异步IO，libuv中包含一个事件队列（可以理解为就是主线程），如果是网络io，它会使用epoll这种io多路复用的方式(在linux中)对io进行处理，而对于磁盘的io操作，它会采用多线程+阻塞io的方式进行io操作，它读写完数据后就将数据返回给js引擎。从而实现io操作。</p><p>最后提一点epoll这种io多路复用模型使用的很广，redis,nginx,都不同程度使用了它，它2者也可以归为多进程单线程这种模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作系统基本概念&quot;&gt;&lt;a href=&quot;#操作系统基本概念&quot; class=&quot;headerlink&quot; title=&quot;操作系统基本概念&quot;&gt;&lt;/a&gt;操作系统基本概念&lt;/h3&gt;&lt;p&gt;首先来来说下操作系统，嗯，&lt;strong&gt;操作系统是计算机硬件的管理软件，是对计算机硬件的抽象&lt;/strong&gt;，操作系统将应用程序分为用户态和内核态，例如驱动程序就位于内核态，而我们写的一般程序都是用户态，包括web服务器这些，应用程序无法直接操控硬件，只能通过系统调用，通过操作系统驱动io硬件，通过操作系统管理进程。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ejs的简单使用</title>
    <link href="http://yoursite.com/2020/03/24/ejs%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/24/ejs%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-24T15:51:54.000Z</published>
    <updated>2020-03-25T03:06:32.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>ejs是node的服务端渲染引擎,和art-template,jade差不多,实现功能就大致相当于jsp,虽然现在提倡前后端分离,但服务端渲染还是有它的优点的,最主要的一点当然就是便利于seo,搜索引擎的抓取.所以这篇博客将从几个方面来简单介绍下ejs的使用</strong></p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量嵌套于html模板之中<P><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%&#x3D; title %&gt;  &#x2F;&#x2F;在koa中可以配合ctx的render方法进行渲染</span><br></pre></td></tr></table></figure><p>在模板中定义的变量都需要render函数中对应名称的变量进行渲染,如果想要定义了不渲染,可以使用<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D; locals.name %&gt; &#x2F;&#x2F;这样没有传也不会报错</span><br></pre></td></tr></table></figure><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; </span><br><span class="line"></span><br><span class="line">&lt;%  if (isMe) &#123; %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h4 id="组价"><a href="#组价" class="headerlink" title="组价"></a>组价</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将变量传给引用的ejs文件</span><br><span class="line">&lt;%- include(&#39;&#x2F;文件名.ejs&#39;,&#123;</span><br><span class="line">    isMe</span><br><span class="line">&#125;)%&gt;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;% List.forEach((item)&#x3D;&gt;&#123; %&gt;</span><br><span class="line">    &lt;li&gt;&lt;%&#x3D; item.name %&gt;&lt;&#x2F;li&gt; </span><br><span class="line">&lt;% &#125;) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><h4 id="执行js脚本"><a href="#执行js脚本" class="headerlink" title="执行js脚本"></a>执行js脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&#39;100)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>ejs初探就到这里了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ejs是node的服务端渲染引擎,和art-template,jade差不多,实现功能就大致相当于jsp,虽然现在提倡前后端分离,但服务端渲染还是有它的优点的,最主要的一点当然就是便利于seo,搜索引擎的抓取.所以这篇博客将从几个方面来简单介绍下ejs的使用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>git的commit日志基本规范</title>
    <link href="http://yoursite.com/2020/03/24/git%E7%9A%84commit%E6%97%A5%E5%BF%97%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2020/03/24/git%E7%9A%84commit%E6%97%A5%E5%BF%97%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/</id>
    <published>2020-03-24T14:50:53.000Z</published>
    <updated>2020-03-24T15:35:47.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-commit日志基本规范"><a href="#git-commit日志基本规范" class="headerlink" title="git commit日志基本规范"></a>git commit日志基本规范</h3><p>利用git的commit指令提交代码我想大家都知道,但是git的commit的日志内容其实也是有所讲究的,为了更好的维护代码,应该提升git的commit日志信息的可读性,这样可以方便以后更好的查看提交的代码记录,也方便更好的维护代码,所以有良好的代码日志规范也是很重要的<p><a id="more"></a><h4 id="git的日志格式"><a href="#git的日志格式" class="headerlink" title="git的日志格式"></a>git的日志格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><h4 id="type详解"><a href="#type详解" class="headerlink" title="type详解"></a>type详解</h4><p> type表示某次提交的类型,比如是修复一个bug还是增加一个新的功能,type的类型如下:</p><ul><li>feat 表示新增功能</li><li>fix 修复bug</li><li>docs 仅仅修复了bug文档,例如readme这些文档</li><li>style 修改了样式,但不改变代码的逻辑</li><li>refactor 代码重构,没有新增功能,也没有修改bug</li><li>pref 优化相关,比如提升性能,体验</li><li>test 测试用例,例如单元测试,集成测试</li><li>chore 改变构建流程,或者添加依赖库和工具</li><li>revert 回滚到上一个版本</li></ul><h4 id="其它部分解释"><a href="#其它部分解释" class="headerlink" title="其它部分解释"></a>其它部分解释</h4><p><strong>标题行</strong></p><p>50个字符以内，描述主要变更内容</p><p><strong>主体内容</strong></p><p>更详细的说明文本，建议72个字符以内</p><p><strong>尾部</strong></p><p>如果需要的化可以添加一个链接到issue地址或者其它文档，或者关闭某个issue</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git-commit日志基本规范&quot;&gt;&lt;a href=&quot;#git-commit日志基本规范&quot; class=&quot;headerlink&quot; title=&quot;git commit日志基本规范&quot;&gt;&lt;/a&gt;git commit日志基本规范&lt;/h3&gt;&lt;p&gt;利用git的commit指令提交代码我想大家都知道,但是git的commit的日志内容其实也是有所讲究的,为了更好的维护代码,应该提升git的commit日志信息的可读性,这样可以方便以后更好的查看提交的代码记录,也方便更好的维护代码,所以有良好的代码日志规范也是很重要的&lt;p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JSDoc的使用</title>
    <link href="http://yoursite.com/2020/03/24/JSDoc%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/24/JSDoc%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-24T08:32:31.000Z</published>
    <updated>2020-03-24T10:45:37.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSDoc作用"><a href="#JSDoc作用" class="headerlink" title="JSDoc作用"></a><code>JSDoc</code>作用</h3><p>我们都知道js是门弱类型的语言,所以,为了增强代码的可读性,提高js的代码规范,可以选择使用JSDoc进行代码的注释,有了更多类型描述,例如参数类型,函数的返回值类型等等这些的类型描述,在进行开发时会带来很大的便捷,在这基础上稍做扩展,就可以用于代码提示和语法分析,同时JSDoc也可以导出API文档<p><h3 id="了解基础的JSDoc的使用"><a href="#了解基础的JSDoc的使用" class="headerlink" title="了解基础的JSDoc的使用"></a>了解基础的<code>JSDoc</code>的使用</h3><p>对于复杂的JSDoc的使用,本文就不做介绍了,这里推荐下可以使用Vs code 的插件 Document This , 利用它可以快速生成注释 .本文的主要目的是想要介绍些入门的基础JSDoc 使用语法<a id="more"></a><p><h4 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h4><p>通过书写标签,对js解析引擎确定变量类型有一定的帮助<p><table><thead><tr><th>标签</th><th>介绍</th><th>使用</th></tr></thead><tbody><tr><td>alias</td><td>给一个变量或者函数指定一个别名，代码提示时会提示该别名</td><td><code>@alias aliasName</code></td></tr><tr><td>constructor</td><td>使用@constructor可以标识一个函数是构造函数</td><td><code>@constructor</code></td></tr><tr><td>description</td><td>使用@description可以在代码提示时显示被描述变量或者函数的描述信息</td><td><code>@description 描述内容</code></td></tr><tr><td>example</td><td>使用@example可以提示代码示例。</td><td><code>@example 示例内容</code></td></tr><tr><td>extends</td><td>使用@extends用于标识继承于某个类型</td><td><code>@extends {Type}</code></td></tr><tr><td>param</td><td>使用@param可以描述一个函数的参数以及参数类型</td><td>`@param {Type[,Type,…]} ParameterName=[Value1</td></tr><tr><td>property</td><td>使用@property可以描述一个对象的属性</td><td><code>@property {Type[,Type,...]} propertyName 属性描述</code></td></tr><tr><td>return</td><td>使用@return可以描述一个对象的属性</td><td><code>@return {Type[,Type,...]}</code></td></tr><tr><td>type</td><td>使用@type可以定义某个变量的类型</td><td><code>@type {Type[,Type,...]}</code></td></tr></tbody></table><h4 id="标签的代码示例"><a href="#标签的代码示例" class="headerlink" title="标签的代码示例"></a>标签的代码示例</h4><h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class Animal &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @description 这是一个构造函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @example </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * var animal &#x3D; new Animal(&#39;恐龙&#39;,1000);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @constructor</span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line">    constructor(name,weight)&#123;</span><br><span class="line"></span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line"></span><br><span class="line">       this.weight &#x3D; weight;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    say()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @extends &#123;Animal&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    </span><br><span class="line">    constructor(name,weight)&#123;</span><br><span class="line">        super(name,weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    say ()&#123;</span><br><span class="line"></span><br><span class="line">        console.log(this.name+&quot;:wang wang wang ...&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="param"><a href="#param" class="headerlink" title="param"></a>param</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * 这是一个方法描述</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @param &#123;String&#125; method &#x3D; [get|post] 可选值域包括get和post，get是直接请求，post是提交数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Request(method) &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="return"><a href="#return" class="headerlink" title="return"></a>return</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @return &#123;HTMLDocument&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getDocument() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;some code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="property"><a href="#property" class="headerlink" title="property"></a>property</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @property &#123;IDString&#125; id id元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @property &#123;ClassString&#125; classNames class样式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var htmlOptions &#x3D; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    id:null,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    classNames:null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlOptions.id &#x3D; &quot;123&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlOptions.classNames &#x3D; &quot;arrow area&quot;</span><br></pre></td></tr></table></figure><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @type &#123;IDString&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var htmlId &#x3D; null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlId &#x3D; &quot;123&quot;;</span><br></pre></td></tr></table></figure><h4 id="类型语法"><a href="#类型语法" class="headerlink" title="类型语法"></a>类型语法</h4><h5 id="单一类型"><a href="#单一类型" class="headerlink" title="单一类型"></a>单一类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这里定义一个类型为Document的变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @type &#123;Document&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var foo &#x3D; null;</span><br></pre></td></tr></table></figure><h5 id="多个类型"><a href="#多个类型" class="headerlink" title="多个类型"></a>多个类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这里定义一个类型为Document,HTMLElement的变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @type &#123;Document,HTMLElement&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var foo &#x3D; null;</span><br></pre></td></tr></table></figure><h5 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这里定义一个参数为Event的回调函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @param &#123;Function(Event)&#125; callback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function testCallBack(callback)&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里定义一个返回类型是参数为IDString返回值为HTMLElement的函数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @return &#123;Function(IDString):HTMLElement&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function testFunctionReturn()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return foo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var rFunc &#x3D; testFunctionReturn();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rFunc(&#39;id&#39;).getElementsByClassName(&#39;classA&#39;);</span><br></pre></td></tr></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>本文的绝大部分借鉴了html5plus官网上的这篇 <a href="https://www.html5plus.org/doc/jsdocp.html" target="_blank" rel="noopener">文章</a>,更多详细信息可以去查看JSDoc的<a href="https://www.html.cn/doc/jsdoc/index.html" target="_blank" rel="noopener">官方文档</a>,本文只做个入门的参考</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JSDoc作用&quot;&gt;&lt;a href=&quot;#JSDoc作用&quot; class=&quot;headerlink&quot; title=&quot;JSDoc作用&quot;&gt;&lt;/a&gt;&lt;code&gt;JSDoc&lt;/code&gt;作用&lt;/h3&gt;&lt;p&gt;我们都知道js是门弱类型的语言,所以,为了增强代码的可读性,提高js的代码规范,可以选择使用JSDoc进行代码的注释,有了更多类型描述,例如参数类型,函数的返回值类型等等这些的类型描述,在进行开发时会带来很大的便捷,在这基础上稍做扩展,就可以用于代码提示和语法分析,同时JSDoc也可以导出API文档&lt;p&gt;

&lt;h3 id=&quot;了解基础的JSDoc的使用&quot;&gt;&lt;a href=&quot;#了解基础的JSDoc的使用&quot; class=&quot;headerlink&quot; title=&quot;了解基础的JSDoc的使用&quot;&gt;&lt;/a&gt;了解基础的&lt;code&gt;JSDoc&lt;/code&gt;的使用&lt;/h3&gt;&lt;p&gt;对于复杂的JSDoc的使用,本文就不做介绍了,这里推荐下可以使用Vs code 的插件 Document This , 利用它可以快速生成注释 .本文的主要目的是想要介绍些入门的基础JSDoc 使用语法
    
    </summary>
    
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用步骤</title>
    <link href="http://yoursite.com/2020/01/22/hello-world/"/>
    <id>http://yoursite.com/2020/01/22/hello-world/</id>
    <published>2020-01-22T14:43:19.068Z</published>
    <updated>2020-04-23T16:26:51.281Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
