<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢乐涌动</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-26T05:18:47.675Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cxtao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chromium初探</title>
    <link href="http://yoursite.com/2020/07/26/Chromium%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2020/07/26/Chromium%E5%88%9D%E6%8E%A2/</id>
    <published>2020-07-26T05:18:47.000Z</published>
    <updated>2020-07-26T05:18:47.675Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webkit初探</title>
    <link href="http://yoursite.com/2020/07/25/webkit%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2020/07/25/webkit%E5%88%9D%E6%8E%A2/</id>
    <published>2020-07-25T05:58:10.000Z</published>
    <updated>2020-07-26T05:16:17.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近想要把旧的知识点整理起来，为面试做准备，于是打算从头开始，把css和html重新复习一遍，记一些css的面试题。不过，这个过程挺无聊的，虽然css能做很漂亮的界面，但是css要记的知识点太多了，而且很多也没有什么逻辑性可言，最关键的是我css和html很多都忘了...因为有很多UI库可以使用。当然了肯定是框架工具要会用，原理也要懂，这样才能又能造轮子，又能写外包...，所以，我就又开了篇博客，用来记录下webkit的探索之旅。先说明下，我这篇文章中的观点，也是从网上的博客中东拼西凑，再加入些自己的观点和理解些的，毕竟我也没去看webkit 的源码，所以可能在文章会出现偏差，也请读者自行鉴别。</p><a id="more"></a><h3 id="webkit-介绍"><a href="#webkit-介绍" class="headerlink" title="webkit 介绍"></a>webkit 介绍</h3><p>先来介绍下webkit 是个啥吧，webkit最早是苹果的Safari 浏览器的内核，后来的chrome浏览器也采用了webkit。浏览器的内核简单来说就是渲染引擎，其作用就是把html,css,js 这些字符串渲染成一张图像，显示出来。具体划分的话，内核分为排版引擎和js引擎，排版引擎用于界面的绘制和渲染,js引擎用于执行js代码。浏览器的内核也有很多种，常见的如下。</p><table><thead><tr><th>内核名称</th><th>作用</th></tr></thead><tbody><tr><td>Trident</td><td>大名鼎鼎的IE浏览器的内核，IE8的JavaScript引擎是Jscript，IE9开始用Chakra</td></tr><tr><td>Gecko</td><td>火狐浏览器的内核，JavaScript引擎是：SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0）</td></tr><tr><td>Webkit</td><td>Safari和Chrome的内核，包含WebCore排版引擎及JavaScriptCore解析引擎，在chrome浏览器中，把js引擎改换成了v8.</td></tr><tr><td>Blink</td><td>算是webkit 内核的衍生物，google在webkit的基础上开发出的浏览器内核，还是使用WebCore和v8。现在Chromium和chrome 都是使用了这个浏览器内核。</td></tr></tbody></table><p>这里，还有一个问题就是 ios 和 安卓 因为 苹果 和 google 的 原因，所以 也都是使用了webkit的内核，(当然安卓现在准确的讲使用的是基于Blink的Chromium)。所以 可以说随着 ie 使用人数的减少 ，webkit 内核已经占领了 桌面 和 移动端 的绝大多数。 </p><p>还有一个有意思的点，webkit 之所以开源，是因为 它的 前身是 KDE的一个开源项目 KHTML(html引擎),苹果在khtml的基础上开发出了WebCore，同时在kjs(ktml配套的js引擎)的基础上开发了JavaScriptCore，并开源出来。然后google 又在 webkit 的基础上保留了WebCore，加入了v8 ，开发出了Blink引擎，所以Blink和webkit其实都可以看成是 KHTML 的衍生物，在保留了KHTML 的基础上进行了修改，所以，本文也不做具体区分了，把 chrome 的内核也称为 webkit。</p><h3 id="浏览器的架构"><a href="#浏览器的架构" class="headerlink" title="浏览器的架构"></a>浏览器的架构</h3><h4 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h4><p>在上面有了个对webkit的简单理解之后，再来说下浏览器的架构，因为浏览器内核是在浏览器中被使用到的，如果在安卓和ios上，则是使用了webview组件去调用浏览器内核。因为浏览器有很多种，这里，就以开发中最常使用到chrome浏览器器为例。</p><p>首先，浏览器大致可以分为5个部分，分别是</p><ol><li>用户界面(地址栏、前进/后退按钮、书签菜单等)</li><li>浏览器引擎(在用户界面和渲染引擎之间传送指令)</li><li>渲染引擎(解析 HTML、CSS和JS并呈现页面)</li><li>后端服务层(网络、数据存储如Cookie、Storage等)</li><li>特别服务层(记住密码、暗黑模式等)</li></ol><p>结构图如下:</p><img src="http://image.myblog-tao.cn//16f758bbcd32f249.webp" style="zoom:100%;" /><h4 id="多进程架构"><a href="#多进程架构" class="headerlink" title="多进程架构"></a>多进程架构</h4><p>chrome 在处理这些浏览器结构的时候，使用了多进程进行处理。当使用了chrome浏览器打开网页的时候，打开系统的任务管理器，就可以看到chrome是有多个进程存在的。</p><p><img src="http://image.myblog-tao.cn//%E6%8D%95%E8%8E%B76.PNG" alt=""></p><p><strong>chrome 的多进程架构图如下</strong></p><p><img src="http://image.myblog-tao.cn//16f758bb346202ed.webp" alt=""></p><p>这其中最重要的就是渲染进程和主进程了，主进程的主要负责功能是显示浏览器的界面，子进程的管理和提供存储功能等，而渲染进程就是浏览器的核心了，Chrome中只有一个主进程，但是可以存在多个渲染进程。渲染进程核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p><p>还有一个有意思的框架可以学下,就是<b>electron</b>，它就是基于这种多进程的浏览器架构和node.js实现的一个用于开发桌面应用程序的框架，它的一个窗口就是一个渲染进程，主进程用于创建渲染进程并控制渲染进程，和渲染进程之间进行必要的通信<b>IPC</b>。不过和chrome有区别的是，渲染进程除了能够使用DOM的api外，还能使用node.js的api。我觉得学习electron，对于理解chrome浏览器的多进程架构是很有帮助的。还有vscode就是基于electron开发的。</p><p>这里，盗张慕课网的图，嘻嘻</p><p>![](<a href="http://image.myblog-tao.cn//2-3" target="_blank" rel="noopener">http://image.myblog-tao.cn//2-3</a> 主进程和渲染进程.mp4_20200520_220716.560.png)</p><p>再来说下，这种多进程架构的优缺点吧，通过给每一个tab窗口开一个进程，这样最大的好处，就是进程的内存空间是独立的，页面之间是不会相互影响的，所以就算浏览器中的一个页面出现了崩溃的问题，对于其它打开的浏览器页面并不会造成影响，而且，因为内存空间相互隔离的原因，所以不同的tab页面之间是不能访问(除非使用IPC的方式)，所以保证了安全性。当然，这样做的方式也是有缺点的，那就是多进程会加大内存的开销，这点在window 系统上会体现得更加得明显，虽然,chrome 也进行了很多的优化。</p><p>因为这篇文章的主体是要介绍webkit，所以这里还是简单的引出就好，更多详细的Chromium架构模型可以看我的第二篇博客。</p><h3 id="WebKit-架构"><a href="#WebKit-架构" class="headerlink" title="WebKit 架构"></a>WebKit 架构</h3><p>简单扯完了浏览器的架构，再回来说webkit。因为浏览器的渲染进程会调用到浏览器的渲染引擎来完成页面的渲染，所以 chrome 的 渲染进程 会 利用webkit 来 实现 html,css 的解析 和 js 代码的执行。</p><p><strong>下面是webkit的架构图</strong></p><p><img src="http://image.myblog-tao.cn//49.png" alt=""></p><p>实线部分是共享的，虚线部分会根据不同的平台有不同的实现。</p><p>比如js 引擎方面 ，Chrome 就使用了 v8。</p><p>还有就是webkit2 已经支持了多进程的使用了，即分UI进程和Web进程，Web进程用于页面渲染，UI进程用于页面的展示。但因为在chrome中, chrome有自己的一套多进程架构，webkit 还是一个库的形式被渲染进程调用，还是以多线程的方式负责页面的渲染工作，所以这里简单提一下就可以了。</p><p><strong>WebCore的架构图</strong></p><p><img src="http://image.myblog-tao.cn//74.png" alt=""></p><h3 id="webkit的工作流程"><a href="#webkit的工作流程" class="headerlink" title="webkit的工作流程"></a>webkit的工作流程</h3><p>知道了webkit的大致架构和作用后，接下来，就是了解webkit的工作流程了，先上张webkit的主要工作流程图</p><p><img src="http://image.myblog-tao.cn//yw9qb5brpt.png" alt=""></p><p>接下来，按照这张图，我来简单说下，webkit的工作流程，webkit再拿到html.css.js这些资源文件之后，就会开始解析，把html解析成dom树，把css解析成 style rules， 然后生成结合两者生成 render 树，再生成 Graphics Layer tree ，然后再进行光栅化产生纹理，最后合成纹理，展示在屏幕上。</p><h4 id="生成dom树"><a href="#生成dom树" class="headerlink" title="生成dom树"></a>生成dom树</h4><p>在chrome 浏览器中，打开一个新的标签页，渲染进程就会创建一个新的webview，该webview是整个网页生成和渲染的入口，webview的构造函数会创建一个新的page对象，它和webview相对应，每个webview只存在一个page对象，每个page中有且仅有一个mainFrame，每个Frame 都有自己的一个 Document，在MainFrame中可以生成多个子Frame，就是我们平常见到的网页中的多Frame页面。Document 对应到的也就是DOM中的document对象，不过。此时，它是在webcore 中，而js 能 访问到的对象 是 在 js 引擎中，所以，这里涉及到对象注入的问题，后面再讲。</p><p>在把页面的基础对象建立后，拿到了html文件，就是用html-parser 模块 开始 html 的解析，解析的过程是从上到下，如果在html页面中出现了 <script>标签，那么默认是需要等待<script> 标签中的 js 代码 解析执行完毕后，再往下解析 html的，而如果<script>标签使用了外链的方式，那么还需要等待网络去获取 js 脚本，正因为js 代码的执行会阻塞 主线程 解析 html ，所以一般推荐 是 把 <script> 标签都放在 页面的 最后，还有就是虽然js线程和渲染线程是互斥的，但它们是运行在不同的线程上。webkit为了提供性能，所以针对这个问题，做了优化，就是html文档的预解析，当遇到js脚本时，主线程会停止html的解析，但是会尝试去加载其它的图片，音视频资源文件等。当html解析完毕后，dom树也就构建完毕了。每个html标签都会被解析成HTMLelement，解析完成后，就可以在js线程访问到了。</p><h4 id="生成css树"><a href="#生成css树" class="headerlink" title="生成css树"></a>生成css树</h4><p>css的文件的加载是异步的，css的解析和html的解析是并发进行的，其实render树的生成和dom 树的生成也是同时进行的，每解析一个html标签，就会挂载一个dom结点，同时，dom结点也会去和css tree 结合，生成 renderlayer Tree ，每个 renderlayer  结点 就是 一个css 的 盒子，当dom树构建完毕，render 树也就构建完毕了 。因为可能会出现js 代码中 访问 css 的情况，所以 webkit 会暂停 那些 试图 访问 某些没有被加载完成的 css 属性 的 js 代码。</p><h4 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h4><p>回流也叫做重排，当节点的尺寸和位置发生改变的时候，就会触发回流，回流会计算页面的布局，并把受影响的部分重新绘制到屏幕。当页面第一次加载的时候，因为要构建布局，所以必然会触发回流。</p><p>当渲染树中的一些元素需要更新一些不会改变元素不局的属性，比如只是影响元素的外观、风格、而不会影响布局的那些属性，这时候就只发生重绘。当然，页面首次加载也是要重绘一次的。</p><h4 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h4><p>renderlayer Tree 会进一步构建成  Graphics Layer tree ，也就是图层， 然后进行光栅化，所谓光栅化就是要对 Graphics Layer 进行实际的绘制，这里会使用到底层的一些 图形库完成绘制，而且根据方式的不同，也分为使用CPU（软件渲染）和使用GPU（硬件渲染）两种，如果使用的是CPU 进行光栅化，那么在 chrome 使用的就是Skia 库，如果使用的是 GPU 进行光栅化，那么使用的就是opengl,光栅化后的 图像叫纹理，不过使用 CPU光栅化有个缺点，就是 cpu 光栅化后的纹理仍然需要上传到 gpu，纹理其实就是由一个个像素点组成的图像，只不过还没有显示到屏幕上，最后使用 gpu 进行纹理的合成，就可以显示在 屏幕上了。</p><h4 id="Dom-binding"><a href="#Dom-binding" class="headerlink" title="Dom binding"></a>Dom binding</h4><p>再回到前面的问题，如果需要把webkit中实现的dom对象或html5对象暴露给javascript，让web开发者在javascript 中能够访问到，就需要在webkit 中为每个对象实现相应的js binding文件，以v8的引擎为例，需要为HTMLDocument  对象实现一个 V8HTMLDocument 的 对象，目的是转化 HTMLDocument 对象 为 v8:Object 。但是 DOM 的对象是很庞大的，再加上后续的html5 对象，如果给每一个cpp文件实现一个相应的转换类，工作量会很大，所以为了解决这个问题，webkit 编写了一套工具，去自动生成 binding 文件，这个过程需要利用到WebIDL ,它是一种特殊的定义语言，用来定义webcore的接口如何绑定到外部语言，这样，只要把webIDL 文件解析执行了，生成的cpp代码就会绑定到webcore的接口，然后再用v8去调用生成的代码，就可以实现v8访问webcore了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>webkit 实际工作的流程比我上面介绍的要复杂的多，很多流程我都是简述的，但是可以简单一点的说，就是在chrome 中，webkit的核心是webcore，它的工作就是把html和css渲染成图层，同时要将CSSOM 和 DOM 注入到 js 引擎中 ，当 js 引擎修改了 DOM 的结构时，重新 渲染图层 。大体就先介绍到这了。写这篇文章也是坑坑洼洼，因为webkit是cpp写的，而且chrome本身也是涉及到比较多的系统知识，例如icp，所以，很多去看很多前端写的文章并没什么价值，chrome架构的具体介绍，我会在下一篇文章中讲，未完待续...</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/" target="_blank" rel="noopener">https://ming1016.github.io/2017/10/11/deeply-analyse-webkit/</a></p><p><a href="https://cloud.tencent.com/developer/article/1360028" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1360028</a></p><p><a href="https://juejin.im/post/5e11cd225188253a73288212#heading-5" target="_blank" rel="noopener">https://juejin.im/post/5e11cd225188253a73288212#heading-5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近想要把旧的知识点整理起来，为面试做准备，于是打算从头开始，把css和html重新复习一遍，记一些css的面试题。不过，这个过程挺无聊的，虽然css能做很漂亮的界面，但是css要记的知识点太多了，而且很多也没有什么逻辑性可言，最关键的是我css和html很多都忘了...因为有很多UI库可以使用。当然了肯定是框架工具要会用，原理也要懂，这样才能又能造轮子，又能写外包...，所以，我就又开了篇博客，用来记录下webkit的探索之旅。先说明下，我这篇文章中的观点，也是从网上的博客中东拼西凑，再加入些自己的观点和理解些的，毕竟我也没去看webkit 的源码，所以可能在文章会出现偏差，也请读者自行鉴别。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="webkit" scheme="http://yoursite.com/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title>袂信开发踩坑</title>
    <link href="http://yoursite.com/2020/07/22/%E8%A2%82%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/"/>
    <id>http://yoursite.com/2020/07/22/%E8%A2%82%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</id>
    <published>2020-07-22T07:54:21.000Z</published>
    <updated>2020-07-23T15:39:58.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近，学校刚考完试，闲着没事干，于是把老项目袂信又拿出来重新开发和优化。这是我大一做的一个项目，跟着慕课网的视频做的，那时候刚入门前端，很多东西都不懂，做着这个项目，大概了解到了前端的工作范围，界面的制作，数据的获取，数据的渲染，视图的更新，用户事件的监听，等等...</p><p>这也算是一个拿得出手的项目了，后端是我师兄开发的，后台接口开发好了，在这个基础上去把前端完成，这也算是当时进入工作室的考核了。前端用的是mui开发出来的5+App,可以跨端，大部分的原生接口也可以通过html5plus实现调用。就是界面是使用html页面的 webview 渲染，所以性能不太行。当然因为这个项目是全栈的，所以权衡利弊，使用前端来开发App，确实开发效率更高，而且实现了跨端，虽然在ios上只生成了越狱包...</p><a id="more"></a><p>那个时候，我还在聊天功能的基础上，加进去了地图，笔记本，打开文件，搜索(调用了百度的api),分享下载链接，聊天助手这些模块。不过现在看来，觉得还是把主要的聊天模块实现好就行，所以，我这次更新，也只改动了聊天模块。而且我这次更新的主要目的是要把后台给实现了，让聊天应用能重新跑起来。</p><h2 id="开始动工"><a href="#开始动工" class="headerlink" title="开始动工"></a>开始动工</h2><h3 id="接触javaWeb"><a href="#接触javaWeb" class="headerlink" title="接触javaWeb"></a>接触javaWeb</h3><p>其实，我没什么Java的项目开发经验，就学了Java se  和 学了 springboot 的几个注解 ， 在加上玩转了 2个 node 后端项目 ， 对服务端 有一些 了解 ，所以，刚开始上手开发java 项目 ，还是会感觉吃力的，最直观的感受就是 java 的 项目 比起 js 为 主体的项目 (前端 也好，node也好)  的 模块化 要更细，更严谨，也可以说更加的繁琐，Java是有类型的，这点和js区别很大。最典型的例子就是 要返回一个对象给前端，如果是在node的话，可以直接采用对象字面量的形式，返回，而在java中，就需要先写个class，在class 中写各种 成员变量，给每个成员变量定义 get 和 set 方法，然后再主类中 new 出来这个对象，再调用这个对象的 set 方法 进行 赋值。当然，这样做的确也有好处，代码的规范性 可以避免减少很多错误，也会方便管理，我想这也算Java 这么流行的原理。</p><p>java web  的 分层很明确，分为 Control，Service，DAO 三层，DAO又分为mapper,pojo和vo，mapper用于数据库的CRUD,pojp简单数据库类型，vo 是CRUD返回的数据类型, Service 用于主要的业务逻辑处理,Control 用于向前端 提供接口。此外，还有划分些模块用于存放枚举和工具类，Application是项目的入口文件.</p><p><img src="http://image.myblog-tao.cn//%E6%8D%95%E8%8E%B79.PNG" alt=""></p><p>还有就是Spring的 IOC 和 AOP 思想，虽然我之前也有听说过了，但也是在项目中才慢慢体会到的，(因为时间问题，所以我直接跳过了spring 和 spring mvc 的 学习，毕竟写配置文件太累人了...)，简单的来说，IOC 就是依赖注入，在springBoot 中 使用bean 注入的 类 ，在使用的时候是不需要 手动 去 new 的，因为 创建对象的工作是由spring 来实现的，spring 使用了 单例模式，对注入的类进行管理，这样，除了请求进来的参数对象是需要new出来的，和响应出去的对象是需要new返回出来的，其它对象都是可以通过spring框架实现共享的。这里，我在说下自己的个人理解，我觉得Spring，需要这么做的主要原因是Java没有函数这个概念，Java的逻辑写在类中的方法内，而类必须实例对象才能使用，而像Node，它的逻辑是写在函数中，函数也是对象，存放在堆区，所以Node很容易就实现了不同的响应和请求之间函数体对象(代码逻辑)的共享，而Spring，为了避免一个请求响应，创建一份代码逻辑的对象，所以需要使用单例模式，从而实现逻辑对象的共享。</p><p>至于AOP，我的理解是通过使用注解的方式，spring可以给类注入逻辑，从而实现对程序的权限拦截，运行监控等功能。比如control 层使用注解去规定是post 还是 get 时 调用此 方法, 这就是典型的权限拦截。至于底层的实现原理，是利用了Java的反射机制，通过反射检查出类的类型和方法，还有方法上的注解，从而执行响应的逻辑处理。</p><h3 id="springBoot-框架-和-myBatis的集成"><a href="#springBoot-框架-和-myBatis的集成" class="headerlink" title="springBoot 框架 和 myBatis的集成"></a>springBoot 框架 和 myBatis的集成</h3><p> web 开发的主要框架是springBoot ，数据库操作则是使用了mybatis ，不过为了避免直接写sql语句，还是使用了个orm框架 <b>tk-mybatis</b>,使用了springboot 集成 mybatis ，还是碰到了一些坑，主要还是我对java web 的 生态 不熟，不知道  java web的主要依赖是哪些 ，所以使用 maven 倒腾了 很久 ，最后的配置代码如下。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 分页插件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 数据库处理 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ORM 工具</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.1.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于生成dao层代码</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line"></span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其中的mysql 用于连接 mysql 数据库，mybatis 是在mysql 基础上的 一层封装 ， generator 用于生成代码，pagehelper是个分页插件,tk.mybatis是个和mybatisPlus差不多的ORM 工具。此外idea 还有个plugin 的插件，用于实现 mapper 的 xml 和 java代码的跳转...</p><p>把这些工具都装上了之后，还需要再进行下数据库的配置，还有就是数据库和数据表的设计，这也是个学问，不过这篇文章就不涉及这些了，数据库和数据表设计好后，就是运行generator生成代码了。</p><p>因为使用了springboot，所以数据库的配置就写在applicatiog.properties这个文件就行，把连接的数据库的地址和账号，密码都写进去，还有一些springboot 集成 mybatis 的基础配置。然后还需要一个mybatis-generator 的 配置文件，配置数据库的信息，生成的mapper 和 pojo 的目录，要生成的数据库的表。然后执行 generator 生成代码。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generator 的配置代码</span></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line">    &lt;context id=<span class="string">"MysqlContext"</span> targetRuntime=<span class="string">"MyBatis3Simple"</span> defaultModelType=<span class="string">"flat"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"beginningDelimiter"</span> value=<span class="string">"`"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"endingDelimiter"</span> value=<span class="string">"`"</span>/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;plugin type=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">"mappers"</span> value=<span class="string">"com.imooc.utils.MyMapper"</span>/&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置数据库信息</span></span><br><span class="line">        &lt;jdbcConnection driverClass=<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">                        connectionURL=<span class="string">"jdbc:mysql:"</span></span><br><span class="line">                        userId=<span class="string">""</span></span><br><span class="line">                        password=<span class="string">""</span>&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 对于生成的pojo所在包 --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=<span class="string">"com.imooc.pojo"</span> targetProject=<span class="string">"src/main/java"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 对于生成的mapper所在目录 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=<span class="string">"mapper"</span> targetProject=<span class="string">"src/main/resources"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置mapper对应的java映射 --&gt;</span><br><span class="line">        &lt;javaClientGenerator targetPackage=<span class="string">"com.imooc.mapper"</span> targetProject=<span class="string">"src/main/java"</span> type=<span class="string">"XMLMAPPER"</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是数据库对应的表</span></span><br><span class="line">&lt;table tableName="users"&gt;&lt;/table&gt;</span><br><span class="line">&lt;table tableName="my_friends"&gt;&lt;/table&gt;</span><br><span class="line">&lt;table tableName="friends_request"&gt;&lt;/table&gt;</span><br><span class="line">&lt;table tableName="chat_msg"&gt;&lt;/table&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><p>接下来为了能够使用tk-mybatis，需要自定义个类继承至 tkmybatis , 然后把mapper 的 java 类 都 继承 至 自定义的类，这样就可以在 mapper 中 使用 tk-mybatis 的 方法了，这个在generator的配置文件中也要写上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">    <span class="comment">//FIXME 特别注意，该接口不能被扫描到，否则会出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChatMsgMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">ChatMsg</span>&gt; </span>&#123;</span><br><span class="line">&#125;  <span class="comment">// ChatMsg 是 pojo 类</span></span><br></pre></td></tr></table></figure><p>到这里，mybatis 的集成 和 配置就基本完成了.再总结下springBoot中写sql语句的方式，可以使用注解，也可以在mapper的xml文件中写，最简单的还是直接使用tkmybatis提供的对象方法进行crud的操作，直接省略了大部分的sql语句。</p><p>最后，再总结下,JavaWeb 开发中常用到的 Maven依赖，</p><table><thead><tr><th>作用</th><th>技术</th></tr></thead><tbody><tr><td>日志</td><td>Log4j</td></tr><tr><td>热部署</td><td>devtools</td></tr><tr><td>注解工具</td><td>lombok</td></tr><tr><td>测试</td><td>JUnit</td></tr><tr><td>数据库连接池</td><td>Druid</td></tr><tr><td>缓存连接</td><td>Jedis</td></tr><tr><td>JSON解析</td><td>Gson,fastjson,jackjson</td></tr></tbody></table><p>然后json 解析 就用了阿里的 fastJson ，最近 fastJson 报了bug 出来….</p><h3 id="初识netty"><a href="#初识netty" class="headerlink" title="初识netty"></a>初识netty</h3><p>因为这个项目的后端聊天模块是使用netty进行开发的，用netty实现的websocket。当然，我接触了一段时间的netty ，发现它可以实现的功能模块远不止websocket，甚至把tomcat的功能也实现了也没问题，netty 是一个java的网络库，就和libevent,libev,libuv这些网络库，只不过这些是c/c++实现的网络库，netty底层是使用了java 的 nio ，基于nio 进行了一层封装.至于java的io，Aio,Bio,Nio,我也只有一个简单的理解，Java的io 底层还是需要调用native模块的，所以，像linux下的epoll,poll，read，write 这类系统调用，还是需要通过native代码去实现的，然后java的io 在这些调用的基础上进行一层封装，例如Nio，可以理解为就是在linux系统上的多路复用io的一层封装，底层基于像epoll这类技术，通过多路复用io，就可以实现一个线程同时阻塞多个socket，一个线程同时监听多个socket的活动，所以netty的selector和channel也是基于这个。</p><p>然后就是nettty的网络模型，netty的异步io是指nioeventloop在使用selector 监听 多个 socket 的同时，会维护一个channel的队列，而channel上注册Handler，在socket活跃的时候，就会触发handler的执行。这和node的异步io模型也是有些区别的，node的事件处理逻辑是在主线程(js线程)，而io处理是在从线程，eventloop 的主要作用是分发socket的连接断开和读写。而netty的eventloop的作用主要是用于分发io处理(socket的读写和事件的逻辑处理),具体线程的设置则要看reactor模型的设置(比如主线程用于接收io请求，从线程用于处理io请求的逻辑操作并读写数据)</p><p>还有一点要说明的是,java中也是有异步的，也是使用主从线程的模型，主线程用于分发任务，从线程用于执行任务，从而对主线程来说，任务的执行是异步的，任务执行完毕后后，从线程通知主线程，返回数据，或者通知主线程执行回调函数。java中提供了future和promise，这个promise和es6的promise还是有区别的，就不说了。</p><p>再顺便对比下tomcat，tomcat是java的应用服务器，tomcat 现在也支持nio了，使用nio后，它会使用io多路复用的模式去监听socket，当发现有请求到来的时候，它会接收连接，然后读取文本并且解析http协议，然后生成res,req,取出请求的servlet，从线程池取出线程，并在该线程中执行这个servlet，把res的内容发送到客户端连接。也就是说tomcat在执行io的逻辑处理的时候是使用多线程的，为每一个请求提供一个线程，而接收io这个过程可以使用单线程的io多路复用的模式。这种模型和netty的多线程模型基本一致，当然netty的reactor模型还有单线程模型和主从线程模型，单线程模型就是channel的处理和selector都在同一个线程，这让我想起了redis的单线程模型,主从线程模型就是使用2组线程池，一组线程池接受请求，一组线程池处理io请求.</p><h3 id="netty-代码实战"><a href="#netty-代码实战" class="headerlink" title="netty 代码实战"></a>netty 代码实战</h3><p>用netty创建一个http服务器输出"hello word"，HelloServer用于启动netty，HelloServerInitializer是向里面注册channel，CustomHandler 是往channel的pipeline 中添加的handler.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义一对线程组,</span></span><br><span class="line">            <span class="comment">// 主线程组，用于接受客户端的连接，但是不做任何处理</span></span><br><span class="line">            EventLoopGroup mainGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">            <span class="comment">// 从线程组，负责做任务</span></span><br><span class="line">            EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 服务器的创建，ServerBootstrap是一个启动类</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(mainGroup, workerGroup)     <span class="comment">// 设置主从线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)     // 设置<span class="title">nio</span>的双向通道</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">HelloServerInitializer</span>())</span>;  <span class="comment">// 子处理器，用于处理workerGroup</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动8081 端口,启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">8081</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭的channel ，设置同步方式</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 关闭线程池</span></span><br><span class="line">            mainGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化器,channel 注册后，会执行里面的相应的初始化方法,使用拦截器处理管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取管道</span></span><br><span class="line">        ChannelPipeline channelPipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过管道，添加handler</span></span><br><span class="line">        <span class="comment">// HttpServerCodec 是由netty 自己提供的助手类，可以理解为拦截器</span></span><br><span class="line">        <span class="comment">// 当请求到服务端，我们需要做解码，响应到客户端做编码</span></span><br><span class="line">        channelPipeline.addLast(<span class="string">"HttpServerCodec"</span>,<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加自定义的助手类，返回 "hello netty"</span></span><br><span class="line">        channelPipeline.addLast(<span class="string">"customHandler"</span>,<span class="keyword">new</span> CustomHandler());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建自定义助手类</span></span><br><span class="line"><span class="comment">// 对于请求来讲，其实相当于[入站,入境]</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">HttpObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"channel  注册"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelRegistered(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channel  移除"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelUnregistered(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channel  活跃"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channel 不活跃"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channel  读取完毕触发"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelReadComplete(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channel 用户事件触发"</span>);</span><br><span class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"channel 用户事件 更改"</span>);</span><br><span class="line">        <span class="keyword">super</span>.channelWritabilityChanged(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"捕获到异常"</span>);</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"助手类添加"</span>);</span><br><span class="line">        <span class="keyword">super</span>.handlerAdded(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"助手类移除"</span>);</span><br><span class="line">        <span class="keyword">super</span>.handlerRemoved(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取channel</span></span><br><span class="line">            Channel channel = ctx.channel();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> HttpRequest)&#123;</span><br><span class="line">                System.out.println(channel.remoteAddress());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义发送的数据消息</span></span><br><span class="line">        ByteBuf content = Unpooled.copiedBuffer(<span class="string">"hello netty~"</span>, CharsetUtil.UTF_8);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建一个http response</span></span><br><span class="line">         FullHttpResponse response = <span class="keyword">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK,content);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// response 设置http 的头,版本信息，状态码，内容 buffer，然后把 response 用 上下文 ctx 写到客户端,这样handle 就处理完毕了</span></span><br><span class="line">        <span class="comment">// content-type  设置返回的数据类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// response 的 http 头类型</span></span><br><span class="line">        response.headers().set(HttpHeaderNames.CONTENT_TYPE,<span class="string">"text/plain"</span>);</span><br><span class="line">        response.headers().set(HttpHeaderNames.CONTENT_LENGTH,content.readableBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把数据写到缓冲区，并刷到客户端</span></span><br><span class="line">        ctx.writeAndFlush(response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头像图片上传模块"><a href="#头像图片上传模块" class="headerlink" title="头像图片上传模块"></a>头像图片上传模块</h3><p>因为项目中使用到了图片上传到功能，所以我决定把七牛云加到我的项目中，刚开始我是想用fastFd+nginx搭建文件服务器的，但后来想想我服务器的带宽，还是算了。因为我前端用的是base64上传的图片，所以这里需要把base64的图片转化成file或者stream，之后上传，我转换成stream，但发现这样虽然能上传上去，但是返回的连接，也是stream，而不是直接png这种图片格式，无法直接渲染到页面上。所以我只能转换成file格式上传了，但是项目中还要使用到大小图的功能，得把file转换成stream才能进行压缩成缩略图...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> QiNiuServiceImpl qiniuService ;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">private</span> ImageUtils imageUtils ;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@PostMapping</span>(<span class="string">"/uploadFaceBase64"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> IMoocJSONResult <span class="title">uploadFile</span><span class="params">(@RequestBody userBO userBO)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"接收到上传的图片"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取Base64的字符串</span></span><br><span class="line"></span><br><span class="line">       String base64File = userBO.getFaceData();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  System.out.println(base64File);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将base64字符串转换file上传</span></span><br><span class="line">     File file = ImageUtils.base64ToFile(base64File,<span class="string">"./png/"</span>+String.valueOf(System.currentTimeMillis()) + <span class="string">".png"</span>);</span><br><span class="line"></span><br><span class="line">        String res = qiniuService.uploadFile(file);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 将 file 转为 inputstream</span></span><br><span class="line">       InputStream in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 生成缩略图</span></span><br><span class="line">       in =  ImageUtils.thumbnailImage(in,<span class="number">120</span>,<span class="number">120</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将缩略图的inputStream转化为file，然后上传</span></span><br><span class="line">     file =  ImageUtils.inputstreamtofile(in,<span class="string">"./png/"</span>+String.valueOf(System.currentTimeMillis()) + <span class="string">".png"</span> );</span><br><span class="line"></span><br><span class="line">       String url = qiniuService.uploadFile(file);</span><br><span class="line"></span><br><span class="line">       in.close();</span><br><span class="line"></span><br><span class="line">       Users users = <span class="keyword">new</span> Users();</span><br><span class="line"></span><br><span class="line">       users.setId(userBO.getUserId());</span><br><span class="line"></span><br><span class="line">       users.setFaceImageBig(res);</span><br><span class="line"></span><br><span class="line">       users.setFaceImage(url);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 更新完返回更新后用户的数据</span></span><br><span class="line">       Users result = userService.updateUserInfo(users);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"上传完成"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> IMoocJSONResult.ok(result);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="websocket的简单介绍"><a href="#websocket的简单介绍" class="headerlink" title="websocket的简单介绍"></a>websocket的简单介绍</h3><p>websocket是html5的协议，使用起来，还是挺简单的，包括4个生命周期和2个主动方法和4种状态。</p><table><thead><tr><th>生命周期</th><th>作用</th></tr></thead><tbody><tr><td>onoepn()</td><td>连接建立时触发</td></tr><tr><td>onmessage()</td><td>用于监听来自服务端的消息</td></tr><tr><td>onerror()</td><td>连接出错时调用</td></tr><tr><td>onclose()</td><td>连接关闭时调用</td></tr></tbody></table><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>send()</td><td>用于向服务端发送数据</td></tr><tr><td>close()</td><td>主动关闭websocket连接</td></tr></tbody></table><table><thead><tr><th>状态</th><th>作用</th></tr></thead><tbody><tr><td>0</td><td>连接尚未建立</td></tr><tr><td>1</td><td>连接已经建立，可以进行通信</td></tr><tr><td>2</td><td>连接正在进行关闭</td></tr><tr><td>3</td><td>连接已经关闭</td></tr></tbody></table><h3 id="websocket聊天内容的封装"><a href="#websocket聊天内容的封装" class="headerlink" title="websocket聊天内容的封装"></a>websocket聊天内容的封装</h3><p>为了更加容易进行客户端和服务端进行通信，于是在这个基础上，又进行了一层通信的消息内容的封装。封装的java类如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataContent</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serizalVersionUID = <span class="number">8021381444738260454L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ChatMsg chatMsg ;  <span class="comment">// 内容的主体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer action ;   <span class="comment">// 动作类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.表示的是连接建立，放入map中</span></span><br><span class="line">    <span class="comment">// 2.表示的是客户端发送消息</span></span><br><span class="line">    <span class="comment">// 3.表示的是客户端接收到消息</span></span><br><span class="line">    <span class="comment">// 4.表示的是客户端发送的心跳包</span></span><br><span class="line">    <span class="comment">// 5. 表示的是服务端通知客户端更新消息人列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String extend ;   <span class="comment">// 批量接收的消息的ID</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMsg <span class="title">getChatMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chatMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChatMsg</span><span class="params">(ChatMsg chatMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chatMsg = chatMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAction</span><span class="params">(Integer action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.action = action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> extend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExtend</span><span class="params">(String extend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.extend = extend;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMsg</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 用于记录聊天消息的ID</span></span><br><span class="line">    <span class="keyword">private</span> String msgId;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 用于记录发送者的用户ID</span></span><br><span class="line">    <span class="keyword">private</span> String sendUserId;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于记录消息接受者的用户ID</span></span><br><span class="line">    <span class="keyword">private</span> String acceptUserId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于记录聊天消息</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于标记消息的已读和未读</span></span><br><span class="line">    <span class="keyword">private</span> Integer signFlag;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于记录消息的创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMsgId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msgId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsgId</span><span class="params">(String msgId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msgId = msgId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> send_user_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSendUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sendUserId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sendUserId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSendUserId</span><span class="params">(String sendUserId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sendUserId = sendUserId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> accept_user_id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAcceptUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> acceptUserId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acceptUserId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcceptUserId</span><span class="params">(String acceptUserId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.acceptUserId = acceptUserId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用于标记信息是否已读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sign_flag - 用于标记信息是否已读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSignFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> signFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置用于标记信息是否已读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> signFlag 用于标记信息是否已读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSignFlag</span><span class="params">(Integer signFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.signFlag = signFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ChatMsg&#123;"</span> +</span><br><span class="line">                <span class="string">"msgId='"</span> + msgId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sendUserId='"</span> + sendUserId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", acceptUserId='"</span> + acceptUserId + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", msg='"</span> + msg + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", signFlag="</span> + signFlag +</span><br><span class="line">                <span class="string">", createTime="</span> + createTime +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> create_time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> createTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="聊天模块的开发"><a href="#聊天模块的开发" class="headerlink" title="聊天模块的开发"></a>聊天模块的开发</h3><p>项目中涉及到的聊天模块的功能逻辑还是很复杂的，但细致的功能划分就分为2个大的模块，一个是朋友列表的信息，一个是聊天的信息列表，2个模块都涉及到增删改查，当添加了好友请求后，客户端的好友列表要发生改变，当好友的个人信息发生了改变的时候，客户端的好友列表也要发生改变。聊天信息的增加则和用户在不在线有很大联系，如果用户在线，则直接把消息发送给客户端，否则则是先把消息存储在数据库中，标记为未读，待用户上线后，去服务端请求未读的消息，服务端把消息返回，并标记为已读。而在客户端用户对消息的已读和未读，则由客户端去控制，同时客户端还要根据已读和未读消息去渲染不同的聊天快照。而且在新消息来了之后，应该根据不同的联系人去进行分类，如果当前用户正在消息的联系人的聊天页面中，则直接将消息渲染到页面上。</p><p>关于服务端的消息推送机制，是每一个用户连接服务端后(<b>connect阶段</b>)，就会使用ChannelGroup的channel保存起来，然后当用户退出连接时，就将用户的channel从ChannelGroup删掉(<b>close阶段 </b>)，这样所有在线用户的channel就都保存在一个ChannelGroup里了，但是这样还是没办法找到想要通信的人的channel，所以，得建立一种机制能够根据用户的id找到这个用户的channel，而用户自身的id和用户想要通信的人的用户id则从前端传过来，于是在ChannelGroup的基础上在使用一个map用来实现channel和用户的id的映射保存，客户端在onopen的第一个请求会发送自己的用户id，然后服务端把用户id和用户的channel保存到map中，这样的话，就能根据用户id，找到channel，再判断该channel在ChannelGroup中是否存在，(因为用户断开的时候并不会发送自己的用户id,所以没办法把映射删掉，所以在map中存在的也可能是以前连接的)来判断该用户是否在线了，如果在线的话，就用接收方的channel推送消息，不在线的话，就先把消息保存到数据库里，标记为未读。</p><P>为了避免客户端一直连接占用服务端的资源，于是又引入了个心跳包的机制，也就是在客户端设置个定时器，客户端每10秒就会向服务端发送一个websocket数据包，然后在服务端设置心跳包超时的时间是12秒，如果超过这个时间，那么服务端就会认为客户端程序已经被挂起了，于是会自动把websocket切断，从而减少资源的占用，不过客户端那里有个坑，后面再说。这样的话服务端的聊天模块就基本开发完毕了。</p><h3 id="客户端切后台后的bug"><a href="#客户端切后台后的bug" class="headerlink" title="客户端切后台后的bug"></a>客户端切后台后的bug</h3><p>客户端的逻辑是这样的，登陆进入主页之后，就会发送请求去 建立websocket连接，然后在websocket建立完毕后的onopen生命周期中，发送类型为1的请求数据包，让服务端把连接放到map中，然后启动一个定时器发送心跳包。如果出现数据包发不出去的情况就会判断当前的websocket是不是open状态，如果不是的话，就会重新建立websocket连接，设置重发定时器，然后把这个消息再重发出去，重发失败了又会去检查websocket的连接状态，再走一遍上面的流程。</p><p>这样逻辑也没多大问题，但是如果把应用切到后台运行，那么再切到后台的一段时间内，应用其实还是活着的，能够和服务端建立心跳包，但是过了一段时间，应用就会被系统冻结了，心跳包也就断了，服务端也就把websocket给关了，但是如果你不手动把在后台的应用杀死，过了一会，再重新打开程序，这时候程序就会出错了，因为启动后的程序的定时器还存在，于是还会去发送心跳包，然后心跳包发不出去，知道了websocket被断开了，于是会请求重新建立websocket，但是websocket 打开需要从连接状态变成open状态 ，到了open状态才能 发送消息，而此时重发定时器仍然在起作用 ， 所以在websocket处于连接状态的时候 ， 就想尝试去向服务器发送心跳包，这个时候是发不出的，于是客户端以为连接断了， 又会重新去建立一个新的websocket连接，然后按照设置重发定时器，时间到了重发，重发不出去再建立新的websocket连接，然后再重发的逻辑，最后陷入死循环，建立了一堆websocket，但消息就是发不出去。</p><P>为了解决这个bug，我最后的选择是在应用启动后websocket连接失败并关闭的onclose生命周期中把定时器给移除了，然后重新进行websocket初始化，同时在websocket初始化中进行判断，如果wensocket是处于状态0(连接状态)则退出初始化，同时对重发的定时器时间进行调整，终于成功踩坑。并设置只在websocket初始化的阶段去获取服务端的未读数据，不在心跳包的定时器内写获取服务端的未读消息的代码，避免出错。</p><h3 id="mui使用事件委托"><a href="#mui使用事件委托" class="headerlink" title="mui使用事件委托"></a>mui使用事件委托</h3><p>因为我的客户端的页面展示是基于webview，所以其实是个网页，在页面中加入了太多的事件监听函数，于是我在想能不能进行下优化，然后就想到了web的事件委托，但我用mui直接在body上进行监听又不行，于是查看了mui的文档，可以使用类似列表的方式进行批量的事件注册，于是我把原先的使用多个document注册监听事件改成下面这种模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mui(<span class="string">"#about"</span>).on(<span class="string">'tap'</span>,<span class="string">'.mui-table-view-cell'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="comment">//获取id</span></span><br><span class="line">                  <span class="keyword">var</span> id = <span class="keyword">this</span>.getAttribute(<span class="string">"id"</span>);</span><br><span class="line">                    </span><br><span class="line">                  <span class="keyword">switch</span> (id)&#123;</span><br><span class="line">                      <span class="keyword">case</span> <span class="string">"kefu"</span>:</span><br><span class="line">                      ...</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="string">"fenxiang"</span>:</span><br><span class="line">                      ...</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="string">"check_update"</span>:</span><br><span class="line">                     ...</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">case</span> <span class="string">"shouhou"</span>:</span><br><span class="line">                      ...</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                      <span class="keyword">default</span>:</span><br><span class="line">                          <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">   </span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure><h3 id="springBoot-服务部署服务器"><a href="#springBoot-服务部署服务器" class="headerlink" title="springBoot 服务部署服务器"></a>springBoot 服务部署服务器</h3><p>要把springBoot的服务部署到服务器主要有2种方法，一种是使用jar包的方式，一种是使用war包的方式，war包需要自己在服务器上安装tomcat，jar包就不需要了，因为springBoot自带了tomcat。于是我选择了用jar包部署，先用idae把项目打包出jar，然后放到服务器上，再服务器上使用命令启动就可以了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar 项目名.jar &amp;</span><br></pre></td></tr></table></figure><p>这样就运行起来了，日志会打印到文件夹下的nohub.out这个文件。当然还有更高级的部署方式比如,jenkins+github+docker，不过那样对于我这个项目就太麻烦了，所以，还是简单点，手动部署就行,enen</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>到这里，就差不多把我这个项目遇到的坑和整体流程粗略讲完了，可能有些地方记录的不太详细...不管如何，这个项目也算我JavaWeb的第一个项目，前端也在以前的基础做了些简单的优化,在此做下记录，完结！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近，学校刚考完试，闲着没事干，于是把老项目袂信又拿出来重新开发和优化。这是我大一做的一个项目，跟着慕课网的视频做的，那时候刚入门前端，很多东西都不懂，做着这个项目，大概了解到了前端的工作范围，界面的制作，数据的获取，数据的渲染，视图的更新，用户事件的监听，等等...&lt;/p&gt;
&lt;p&gt;这也算是一个拿得出手的项目了，后端是我师兄开发的，后台接口开发好了，在这个基础上去把前端完成，这也算是当时进入工作室的考核了。前端用的是mui开发出来的5+App,可以跨端，大部分的原生接口也可以通过html5plus实现调用。就是界面是使用html页面的 webview 渲染，所以性能不太行。当然因为这个项目是全栈的，所以权衡利弊，使用前端来开发App，确实开发效率更高，而且实现了跨端，虽然在ios上只生成了越狱包...&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="springBoot" scheme="http://yoursite.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>个人博客踩坑总结</title>
    <link href="http://yoursite.com/2020/07/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/07/21/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-21T15:42:42.000Z</published>
    <updated>2020-07-23T15:44:08.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>   我的博客有好几个月没更新了，最近想要把自己之前记在笔记里面的知识点，整理起来，然后发到博客，也要为春招作准备了，所以开始复习以前学过的知识点，还好有做笔记，很多东西回顾起来，还比较容易。所以，我把自己之前做的个人博客也进行了维护，说起来也惭愧。虽然，我有2个博客平台，一个是我自己做的博客平台，一个我用hexo 在 github 搭建的博客平台，但到现在为止，我也没正经的写过几篇博客。主要原因，还是因为我学习比较随意，大部分的笔记都记在了有道云笔记本上了，所以博客也就没怎么写了。我用hexo 在 github 上搭建博客的原因，也是因为 个人博客的搭建后留下的bug 有点多，要真正使用起来，还是不行，所以才在github上搭建了个博客，不过后来一想，把自己做的这个博客项目写进简历里面，也挺不错的，毕竟这个是一个宝贵的项目经验(可能我的项目比较少...)，于是我就开始把老博客拿来踩坑了.</p><a id="more"></a><h2 id="开始行动"><a href="#开始行动" class="headerlink" title="开始行动"></a>开始行动</h2><h3>使用图床</h3><p>我的博客优化，最先遇到的第一个问题就是图片的加载问题，因为我在我的网站上写博客的时候，我是把博客从markdown 格式转为 html 格式 ，然后把 markdown 格式和 html 格式都上传到后台，然后存放到mysql 中，然后博客查看详细的文章的时候，就把html 文本返回回来，虽然这样做也没什么问题，但我一开始为了图方便，写博客的时候，博客的图片是没有使用外链的，而是直接放到文章里，也就是图片最终以base64的格式存在markdown 转换后html中，这样问题就大了，怎样直接就导致了文章的字符串太大(因为base64是存放在html字符串里面的),本身我的服务器带宽就只有1M,我打开个文章要等待很长时间，才能在前端的页面上显示出来，所以为了解决这个问题，我开始使用图床。</p><p>刚开始是使用github当图床，原因也很简单，我有github账号，配置的话也比较简单，在github上新建个仓库，然后本地客户端去连接github，我用的是PicGo，经过一番配置后就能把图片上传到github了，但也有问题，问题就是图片放在github的仓库，然后使用http 去打开图片的时候，在电脑上会出现图片打不开的情况，原因是DNS污染，得修改本地机器上的<b>hosts文件</b>才能正常访问图片.这就很烦了，如果别人的电脑上没有修改hosts文件，那么访问我的博客时，博客的图片不是打不开了吗，于是只能令找出路. </p><p>接下来，我又看到了个新的平台，就是七牛云了，不过七牛云的配置就繁琐很多了，又要注册账号，又要实名认证，最终还要绑定域名，因为我之前已经给我的服务器配置了域名，所以我就开了个二级域名，用来解析七牛云的chame，具体原理，就是链接会先使用我的域名解析到七牛云的域名，再由<b>chame</b>解析到七牛云的服务器上，详细的配置过程就不赘述了，做好了这些，我就可以先在本地，把图片用PicGo上传到七牛云，然后再使用外链的方式把图片放到博客里了.</p><h3 id="页面刷新处理"><a href="#页面刷新处理" class="headerlink" title="页面刷新处理"></a>页面刷新处理</h3><p>我的博客的前端页面是使用vue开发的单页面，所以当我刷新页面的时候，就会出现问题了，首先说明下vue的路由模式有2种hash和history，我之前使用的是history,history需要后端nginx的支持，hash则对后端完全没有影响。遇到的问题就是如果我从文章的列表页进入文章的详细页，然后网页刷新，这个时候网页数据无法重新刷新出来，我这里使用的vue 路由传参是使用params,而不是query，为了让刷新后的路由参数不丢失(参数就是文章的id，然后vue组件在<b>created</b>阶段通过params获取参数，然后去后端请求数据)，我在router.js中对路由配置进行了处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这是router.js 中对article这个组件的路由配置</span></span><br><span class="line">    path:<span class="string">'/article/:id'</span>,</span><br><span class="line">    name:<span class="string">'article'</span>,</span><br><span class="line">    component:<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./pages/article.vue'</span>],resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line"></span><br><span class="line">    let id &#x3D; this.$route.params.id &#x2F;&#x2F; 获取参数id</span><br><span class="line">     </span><br><span class="line">     this.getData(id) &#x2F;&#x2F; 根据id，去后台获取数据</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样就解决了页面刷新，路由参数丢失的问题。不过这样问题，还是没解决，因为我使用了<b>keep-alive</b>,所以实际上article组件的<b>created</b>的生命周期只会在第一次创建(即第一次打开文章)的时候被执行，所以，必须要在article组件中进行路由的变化检测，这样当检测到路由发生变化的时候就获取路由参数的传过来的文章id，然后去后端获取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">&#x2F;&#x2F; 观察路由发生变化的时候,id是否存在，存在的话就去后端获取数据</span><br><span class="line">    $route(to,from)&#123;</span><br><span class="line">    let id &#x3D; this.$route.params.id</span><br><span class="line">   </span><br><span class="line">    if(id)&#123;</span><br><span class="line">       this.getData(id)</span><br><span class="line">    &#125;    </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由刷新引起的错误还有导航栏的定位问题，我导航栏用的是个header组件，然后把header组件放到App组件中，页面一刷新，导航栏的定位就回到默认的首页，就算当前刷新的路由不是在首页，依旧会定位到首页。为了解决这个问题，我一样在header组件中加入了路由变化监听，刷新页面的时候，会触发该监听函数，然后根据监听到的path，进行定位当前的导航。还有如果是刷新首页的话，那么路由变化的监听函数，就不会触发，于是mounted的生命周期里面，把路由定位定位到首页，刷新页面的时候，会先执行mounted生命周期，再执行路由的监听。这样问题就解决了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">       &#x2F;&#x2F; 进行路由变化的监听</span><br><span class="line"> $route(to,from)&#123;</span><br><span class="line"></span><br><span class="line"> let path &#x3D; [&quot;&#x2F;home&quot;,&quot;&#x2F;archive&quot;,&quot;&#x2F;about&quot;,&quot;&#x2F;login&quot;]</span><br><span class="line"></span><br><span class="line"> for(let i  of path)&#123;</span><br><span class="line"></span><br><span class="line"> if(i &#x3D;&#x3D;&#x3D; to.path)&#123;</span><br><span class="line"></span><br><span class="line"> this.activeIndex &#x3D; to.path;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 解决首页刷新，定位丢失的问题</span><br><span class="line">mounted()&#123;</span><br><span class="line">this.activeIndex &#x3D; &quot;&#x2F;home&quot;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="文章的异常显示处理"><a href="#文章的异常显示处理" class="headerlink" title="文章的异常显示处理"></a>文章的异常显示处理</h3><p>我的博客文章是使用<b>v-html</b>指令渲染上去的，但是博客的图片会有显示溢出的问题，而且代码块的显示也会有溢出的问题，经过多种尝试后，最终发现使用>>> 操作符调整css ，可以使得博客中的img 和 code 正常显示 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// show是文章的父标签的id</span><br><span class="line"><span class="selector-id">#show</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#show</span> &gt;&gt;&gt; <span class="selector-tag">img</span>&#123;</span><br><span class="line">   <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">   <span class="attribute">max-height</span>:<span class="number">100%</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#show</span> &gt;&gt;&gt; <span class="selector-tag">code</span>&#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，为了使得文章能够高亮显示，我又引入了highlight.js 这个插件，并使用vue的自定义指令进行注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">'highlight.js'</span> <span class="comment">//导入代码高亮文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'highlight.js/styles/monokai-sublime.css'</span>  <span class="comment">//导入代码高亮样式</span></span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">'highlight'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> highlight = el.querySelectorAll(<span class="string">'pre code'</span>);</span><br><span class="line"></span><br><span class="line">  highlight.forEach(<span class="function">(<span class="params">block</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">     hljs.highlightBlock(block)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"data.html"</span> <span class="attr">v-highlight</span> <span class="attr">id</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，为了适配移动端，我还使用elment-ui 调整了布局，这样下来，文章终于能正常展示了.</p><h3 id="日期存储的bug"><a href="#日期存储的bug" class="headerlink" title="日期存储的bug"></a>日期存储的bug</h3><p> 我在我的博客底部弄了个本站已经稳定运行的时间，具体逻辑是服务端在启动的时候就保存了日期，然后浏览器访问网页的时候，把这个日期从服务端获取了，然后计算出时间差，并使用定时器在这个时间差的基础上进行运算，但问题就是我那时候为了图方便，就直接把日期保存在node的全局对象global上，但是因为node服务有挂了的风险(服务端使用了pm2,node服务挂了，就把服务重启)，所以时间并不准确，而且之前node连接mysql偶尔还会报连接错误: Error: read ECONNRESET(后来使用了mysql2这个模块才解决了这个问题).</p><p>所以把日期存在global是不行的，于是我把日期存在了<b>redis</b>中,后端服务启动的时候先判断redis中是否已经存在了日期，如果不存在,就把日期存进去，如果存在，则不进行处理，这样，当linux主机关闭时日期才会失效,这样，这个日期才比较有意义.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RedisClient = <span class="built_in">require</span>(<span class="string">'./db/redis'</span>)</span><br><span class="line"></span><br><span class="line">RedisClient.get(<span class="string">'time'</span>, (err, num) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果不存在，则进行赋值</span></span><br><span class="line">  <span class="keyword">if</span> (err || num === <span class="literal">null</span>) </span><br><span class="line">  &#123;</span><br><span class="line">    RedisClient.set(<span class="string">'time'</span>, <span class="built_in">Date</span>.now() + <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="nginx双网站的配置"><a href="#nginx双网站的配置" class="headerlink" title="nginx双网站的配置"></a>nginx双网站的配置</h3><p>我的服务器一开始是只部署了我的博客系统的，不过，后来把易解也部署到服务器了，那时候为了方便访问，就把原先server 的 / 路径部署成易解的网页了,然后再server下面的子路由 /blog 下面部署我的博客系统，让访问这个地址的时候，把我博客系统的html页面返回给浏览器，为了做到这个效果，我把webpack的<b>output</b>配置中的<b>publicPath</b>修改成了 blog,这样打包出来的 js文件 就带上了 blog这个前缀,还把 vue 路由的 <b>base</b> 设置成 <b>/blog</b> ，这样前端路由的页面才会加上/blog 这个前缀，再使用alias 进行nginx的配置，这样下来终于完成了配置。</p><p>虽然这样也可以，但是页面刷新的时候就会出问题，所以，我这次换了另外一种思路，我开了个二级域名，然后在nginx的配置文件中写了2个server，把新的server的hostname配置成我新创建的二级域名，这样就实现了nginx虽然只监听80端口，但却能根据不同的域名部署多个网站。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>  root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>;</span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"> <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript ;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  myblog-tao.cn;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        </span><br><span class="line">// 部署易解</span><br><span class="line"><span class="attribute">location</span> /</span><br><span class="line">&#123;<span class="attribute">root</span>  /home/ftpuser/index;</span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line"></span><br><span class="line">           <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.html <span class="literal">last</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="attribute">add_header</span>    Cache-Control  max-age=<span class="number">86400</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /port/ &#123;</span><br><span class="line">          <span class="attribute">proxy_pass</span>  http://127.0.0.1:4000;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host  <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">location</span> /u/ &#123;</span><br><span class="line">          <span class="attribute">proxy_pass</span>  http://127.0.0.1:7000;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host  <span class="variable">$host</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">                <span class="attribute">proxy_set_header</span> X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="attribute">location</span>  /update/ &#123;</span><br><span class="line">           <span class="attribute">proxy_pass</span>  http://127.0.0.1:4000;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host  <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">4000k</span>;</span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">44000k</span>;</span><br><span class="line"><span class="attribute">proxy_max_temp_file_size</span> <span class="number">1024m</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /download/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/ftpuser;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /png/ &#123;</span><br><span class="line">   <span class="attribute">root</span> /home/ftpuser/blog/blog-express;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">         <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  blog.myblog-tao.cn;</span><br><span class="line">        <span class="attribute">location</span> /png/ &#123;</span><br><span class="line">   <span class="attribute">root</span> /home/ftpuser/blog/blog-express;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 部署博客系统</span><br><span class="line"><span class="attribute">location</span> /&#123;     </span><br><span class="line"><span class="attribute">root</span>   /home/ftpuser/blog/blog/dist/;</span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line"></span><br><span class="line">           <span class="attribute">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> /index.html <span class="literal">last</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="attribute">add_header</span>    Cache-Control  max-age=<span class="number">2592000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">location</span>  /api/ &#123;</span><br><span class="line">           <span class="attribute">proxy_pass</span>  http://127.0.0.1:3000;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host  <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">4000k</span>;</span><br><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">44000k</span>;</span><br><span class="line"><span class="attribute">proxy_max_temp_file_size</span> <span class="number">1024m</span>;</span><br><span class="line"> <span class="attribute">proxy_set_header</span> X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line"> <span class="attribute">proxy_set_header</span> X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">100m</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决文章中单引号引发的mysql错误"><a href="#解决文章中单引号引发的mysql错误" class="headerlink" title="解决文章中单引号引发的mysql错误"></a>解决文章中单引号引发的mysql错误</h3><p>这个问题我一开始是没注意到的，后来再上传文章的时候，发现后台会报错，仔细观察才发现是单引号的问题。因为我后台是直接使用sql语句进行文章的插入的，使用insert 语句 进行 sql 的拼接的时候，插入的值会带个单引号，于是如果我的文章中也出现单引号的话，这样就会导致数据插入异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">"insert into blogs (title,content,createtime,author,label,number,html,imgcode,markdown) values ('"</span> + title +<span class="string">"','"</span> + content + <span class="string">"','"</span> + createTime +<span class="string">"',' "</span> + author + <span class="string">"',' "</span> + label + <span class="string">"',0,'"</span>+ html + <span class="string">"',' "</span> + name + <span class="string">"',' "</span>+markdown+<span class="string">"');"</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，就需要把博客中的 ‘ 进行处理，把它替换成\‘的形式，这样就能成功插入数据了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markdown = markdown.replace(<span class="regexp">/[']/g</span>, <span class="string">"\\'"</span>);  <span class="comment">// 对markdown 中的'进行处理</span></span><br></pre></td></tr></table></figure><h3 id="解决keep-alive导致的标签详情页数据不刷新问题"><a href="#解决keep-alive导致的标签详情页数据不刷新问题" class="headerlink" title="解决keep-alive导致的标签详情页数据不刷新问题"></a>解决keep-alive导致的标签详情页数据不刷新问题</h3><p>我的标签分类打开后，会进入tag组件显示当前分类下的博客列表，但是因为我使用了keep-alive，所以如果获取数据在<b>created</b>生命周期中写的话，那么组件只有在第一次被打开后会执行，所以为了正常显示数据，我又在update生命周期里面，把获取数据的逻辑也写了进去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">name: &#39;archive&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">                activities: [],</span><br><span class="line">num:0,</span><br><span class="line">name:&quot; &quot;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">           &#x2F;&#x2F; 获取数据</span><br><span class="line">getData(name)&#123;</span><br><span class="line">&#x2F;&#x2F;  使用了箭头函数，所以this指向函数外的作用域</span><br><span class="line">this.$http.get(&quot;&#x2F;api&#x2F;blog&#x2F;getlabel&quot;,&#123;params : &#123;name&#125;&#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">      this.activities &#x3D; res.data.data;</span><br><span class="line">      this.num &#x3D; res.data.data.length; </span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 判断当前的参数是否存在，如果存在且发生了改变，就获取数据</span><br><span class="line">judge()&#123;</span><br><span class="line"></span><br><span class="line">let name &#x3D; this.$route.params.name</span><br><span class="line"></span><br><span class="line">     if(  name !&#x3D;&#x3D; undefined &amp;&amp; name !&#x3D;&#x3D; this.name)&#123;</span><br><span class="line"> this.name &#x3D; name ;</span><br><span class="line">this.getData(name);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 在created的钩子函数中去获取参数</span><br><span class="line">created()&#123;</span><br><span class="line">         </span><br><span class="line">  this.judge();</span><br><span class="line"> </span><br><span class="line">&#125;,</span><br><span class="line">&#x2F;&#x2F; 在uodated的钩子函数中去获取参数</span><br><span class="line">updated()&#123;</span><br><span class="line"></span><br><span class="line">this.judge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h3><p>关于前端页面的打包优化，其实在一开始的时候就进行了，包括使用动态路由加载，按需引入组件。nginx也开启了gzip 的 js 代码压缩，和开启了http缓存，为了简单，就直接使用了强缓存，把vue全家桶使用cdn形式导入到html页面中。不过做了这些，还是觉得力度不够，因为我这次博客更新，又引入了代码高亮插件，之前的element-ui因为尝试失败了，也没有成功使用外链的形式导入，所以这次一打包,bundle.js 直接2MB了，再加上我服务器本来带宽就小，结果首屏渲染花了5s，感觉这性能不能忍，于是我又开始了优化。</p><P>我这次优化的主要目的还是把element-ui给打包出来，还有就是把css也给单独打包出来。于是我开始了配置webpack，build出html，放到服务器上，浏览器ctrl+f5尝试刷新的无限循环。这里推荐个插件<b>webpack-bundle-analyzer</b>，使用它可以对bundle.js进行模块分析，这样就知道了哪个模块占了比较大的空间，然后对这几个大模块进行优化，就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">plugins: [ <span class="comment">// 所有webpack  插件的配置节点</span></span><br><span class="line"><span class="keyword">new</span> BundleAnalyzerPlugin(), <span class="comment">//优化分析插件</span></span><br><span class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">template: path.join(__dirname, <span class="string">'./src/index.html'</span>), <span class="comment">// 指定模板文件路径</span></span><br><span class="line">filename: <span class="string">'index.html'</span> <span class="comment">// 设置生成的内存页面的名称</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> UglifyJSPlugin(&#123;</span><br><span class="line">minimize: <span class="literal">true</span>,</span><br><span class="line">sourceMap: <span class="literal">false</span>,</span><br><span class="line">compress: &#123;</span><br><span class="line"><span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class="line">warnings: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">drop_console: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">collapse_vars: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">reduce_vars: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line"><span class="comment">// 最紧凑的输出</span></span><br><span class="line">beautify: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 删除所有的注释</span></span><br><span class="line">comments: <span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> Ex(<span class="string">"styles.css"</span>)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>首先说下，单独打包出css，一开始我的css是打包在bundle.js文件里面的，为了解决这个问题，我使用了<b>extract-text-webpack-plugin</b>这个插件，因为我的webpack是3.0的(老项目了...)，如果是webpack4.0的话，做法可能会有所不同。经过一番配置，就可以把css文件单独单独打包出来了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Ex = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123; <span class="comment">// 配置所有第三方loader 模块的</span></span><br><span class="line">rules: [ <span class="comment">// 第三方模块的匹配规则</span></span><br><span class="line">&#123;</span><br><span class="line">test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">use: Ex.extract(</span><br><span class="line">&#123;</span><br><span class="line">fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">use: <span class="string">"css-loader"</span></span><br><span class="line">&#125;</span><br><span class="line"> )</span><br><span class="line"><span class="comment">//use: ["style-loader","css-loader"]</span></span><br><span class="line"></span><br><span class="line">&#125;, <span class="comment">// 处理 CSS 文件的 loader</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接下来，就是element-ui的优化，不得不吐槽，element-ui是真的大，虽然可以选择按需引入组件，但我还是决定使用cdn把element-ui 外链进来。具体的操作过程是这样的，把element的script标签写在vue的script标签的后面，记住得是后面才行，因为要先引入vue，才能使用element，不然会出错的，再在webpack的配置文件中的externals中把element-ui加进去，然后，还要去main.js，把原先有关element-ui的导入配置都删除了(切记要把代码删掉或注释掉，不然的话，webpack的配置不起作用)，做完了这些，就成功了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;index.css&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.5.17-beta.0/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vuex/2.3.1/vuex.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-resource/1.5.1/vue-resource.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是在webpack中的配置</span></span><br><span class="line">externals: &#123;</span><br><span class="line"><span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line"><span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line"><span class="string">'vuex'</span>: <span class="string">'Vuex'</span>,</span><br><span class="line"><span class="string">'babel-polyfill'</span>: <span class="string">'window'</span>,</span><br><span class="line"><span class="string">'vue-resource'</span>: <span class="string">'VueResource'</span>,</span><br><span class="line"><span class="string">'element-ui'</span>: <span class="string">'ELEMENT'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中,把这些代码都注释掉</span></span><br><span class="line"><span class="comment">//import element from "element-ui"</span></span><br><span class="line"><span class="comment">//import 'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="comment">// Vue.use(element);</span></span><br></pre></td></tr></table></figure><p>经过上面一番操作之后，我的首页打开速度从5s变成3s，bundle.js 从2MB 变成了1MB，可以接受了，所以也就优化到了这里。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>坑就先踩到这里了，踩了这么多坑，博客的稳定性和实用性终于有了很大的提升，这里记录了我踩的几个比较大的坑，其它一些小坑就不再这里赘述了，不得不说，项目要落地是真的难，做个demo是容易的，但是要真正使用起来的话，就会发现很多的坑等着去优化，今天的博客记录就到这里了，完结，撒花！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt;   我的博客有好几个月没更新了，最近想要把自己之前记在笔记里面的知识点，整理起来，然后发到博客，也要为春招作准备了，所以开始复习以前学过的知识点，还好有做笔记，很多东西回顾起来，还比较容易。所以，我把自己之前做的个人博客也进行了维护，说起来也惭愧。虽然，我有2个博客平台，一个是我自己做的博客平台，一个我用hexo 在 github 搭建的博客平台，但到现在为止，我也没正经的写过几篇博客。主要原因，还是因为我学习比较随意，大部分的笔记都记在了有道云笔记本上了，所以博客也就没怎么写了。我用hexo 在 github 上搭建博客的原因，也是因为 个人博客的搭建后留下的bug 有点多，要真正使用起来，还是不行，所以才在github上搭建了个博客，不过后来一想，把自己做的这个博客项目写进简历里面，也挺不错的，毕竟这个是一个宝贵的项目经验(可能我的项目比较少...)，于是我就开始把老博客拿来踩坑了.&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="http://yoursite.com/2020/04/24/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/04/24/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-23T16:29:23.000Z</published>
    <updated>2020-04-23T16:34:22.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git的简单介绍"><a href="#git的简单介绍" class="headerlink" title="git的简单介绍"></a>git的简单介绍</h2><p>git是分布式版本控制工具</p><a id="more"></a><h2 id="git-的基本操作指令"><a href="#git-的基本操作指令" class="headerlink" title="git 的基本操作指令"></a>git 的基本操作指令</h2><h3 id="git的初始化操作"><a href="#git的初始化操作" class="headerlink" title="git的初始化操作"></a>git的初始化操作</h3><p><code>git init</code><br>初始化git仓库</p><p><code>git add 文件名</code></p><p><code>git add .</code></p><p>把文件 添加到 git 暂存区中</p><p><code>git status</code></p><p>查看git 的状态</p><p>出现红色说明有文件，修改了但还没提交到暂存区</p><p><code>git  diff</code>查看修改了哪些文件   增加了哪些行，删除了那些行</p><p><code>git  diff    --cached</code> 查看修改了那些文件</p><p>查看的是修改是暂存区的修改和修改了但未暂存之间的对比</p><p><code>git  commit -m “文字描述”</code>     将暂存区的数据提交到本地仓库</p><p><code>git rm  -f</code> 强制删除  暂存区中的 文件   （会把文件从磁盘一并删除）    有数据，但更改的数据还没放到本地仓库</p><p><code>git rm  文件名</code>    删除文件(会把文件从磁盘一并删除)    暂存区数据已经提交到本地仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached   将数据从仓库中删除（或）暂存区中删除，但不会删除磁盘的文件</span><br></pre></td></tr></table></figure><p>cached 缓存</p><p><code>git  log</code>  查看  git 的  版本提交信息 </p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv README.md README</span><br></pre></td></tr></table></figure><p>对文件进行改名操作</p><p>取消工作区做的修改，让工作区的文件和暂存区的文件内容一样，消除git diff的差异</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>将已提交到暂存区的文件撤销为未暂存状态</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>使用git status 就可以查看下面操作的可选命令</p><p><code>git reset  --hard  commit号</code></p><p>返回上一个提交的版本</p><h3 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h3><p><code>git checkout -b dev</code></p><p>创建并切换dev分支</p><p><code>git branch dev  创建dev分支</code></p><p><code>git branch</code></p><p>查看当前所属分支</p><p><code>git  checkout master  切换到master分支</code></p><p><code>git merge  dev  合并分支</code></p><p>合并后就有dev分支上提交的版本信息</p><p><code>git  branch -d dev</code></p><p>删除dev分支</p><h4 id="合并冲突问题"><a href="#合并冲突问题" class="headerlink" title="合并冲突问题"></a>合并冲突问题</h4><p>先创建一个dev分支  提交</p><p>然后再切换回master分支，再提交</p><p>且2个提交的分支都修改了同一个文件</p><p>然后把dev分支合并到master分支上，产生冲突</p><p>分支切过来是看不到的</p><h3 id="git远程仓库操作"><a href="#git远程仓库操作" class="headerlink" title="git远程仓库操作"></a>git远程仓库操作</h3><p><code>git push origin  分支名</code>   当分支推送到远程</p><p>得推送工作分支上去才行</p><p>推送主分支不行的</p><p><code>git push origin 分支名   --force</code>  强推  嘿嘿</p><p><code>git clone “仓库地址”</code>   把仓库下载到本地</p><p>跟踪远程分支     跟踪完   直接  git  push 就可以了</p><p><code>git  pull  origin  分支名</code></p><p>把远程的分支拉取到本地</p><p>拉下来后，如果远程分支已经做了修改，它就会自动同步远程的代码，并提交一次commit 向本地仓库</p><p><code>git branch --set-upstream-to=origin/smart smart</code>    本地的smart分支跟踪远程的smart分支</p><p>##git 撤销提交的 commit 操作</p><p>写完代码后，我们一般这样</p><p><code>git add .</code>//添加所有文件</p><p><code>git commit -m</code>“本功能全部完成”</p><p>执行完commit后，想撤回commit，怎么办？</p><p>这样凉拌：</p><p><code>git reset --soft HEAD^</code></p><p>这样就成功的撤销了你的commit</p><p>注意，仅仅是撤回commit操作，您写的代码仍然保留。</p><p>说一下个人理解：<br>HEAD^的意思是上一个版本，也可以写成HEAD~1</p><p>如果你进行了2次commit，想都撤回，可以使用HEAD~2</p><p>至于这几个参数：<br>–mixed<br>意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作<br>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><p>–soft<br>不删除工作空间改动代码，撤销commit，不撤销git add . </p><p>–hard<br>删除工作空间改动代码，撤销commit，撤销git add . </p><p>注意完成这个操作后，就恢复到了上一次的commit状态。</p><p>顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：<br><code>git commit --amend</code></p><p>此时会进入默认vim编辑器，修改注释完毕后保存就好了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git的简单介绍&quot;&gt;&lt;a href=&quot;#git的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;git的简单介绍&quot;&gt;&lt;/a&gt;git的简单介绍&lt;/h2&gt;&lt;p&gt;git是分布式版本控制工具&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nust.js初探</title>
    <link href="http://yoursite.com/2020/04/24/nust-js%E5%88%9D%E6%8E%A2/"/>
    <id>http://yoursite.com/2020/04/24/nust-js%E5%88%9D%E6%8E%A2/</id>
    <published>2020-04-23T16:28:37.000Z</published>
    <updated>2020-07-06T05:39:45.053Z</updated>
    
    <content type="html"><![CDATA[<h4 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h4><p><strong>把我个人博客的前端界面部分使用nuxt框架进行服务端渲染</strong></p><a id="more"></a><h4 id="nuxt介绍"><a href="#nuxt介绍" class="headerlink" title="nuxt介绍"></a>nuxt介绍</h4><p><strong>nuxt可以把spa根据路由将单页面分割成多页面,比起vue的ssr渲染要更容易使用</strong></p><h4 id="nuxt的使用"><a href="#nuxt的使用" class="headerlink" title="nuxt的使用"></a>nuxt的使用</h4><h5 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h5><p><code>npx create-nuxt-app &lt;项目名&gt;</code></p><h5 id="nuxt的目录结构"><a href="#nuxt的目录结构" class="headerlink" title="nuxt的目录结构"></a>nuxt的目录结构</h5><p><img src="http://image.myblog-tao.cn//1580344-20200131142344036-720942694.png" alt=""></p><p>其中layouts目录用于存放APP.vue,将其改名为default.vue,既可使用全局的界面配置,注意得用 <code>&lt;nuxt/&gt;</code>代替<code>&lt;router-view&gt;</code></p><p>nuxt的界面嵌套<br><img src="http://image.myblog-tao.cn//1580344-20200131142405828-1131757079.png" alt=""></p><p>pages目录用于存放vue项目的路由页面,nuxt默认情况下根据该目录,对路由进行配置,自动生成路由,所以无特殊情况是不需要自己手动配置路由的</p><p><img src="http://image.myblog-tao.cn//1580344-20200131142416797-305585681.png" alt=""></p><p>components目录用于将vue项目的组件移动到此目录</p><p>plugins目录是插件的使用,例如如果项目使用了element.ui,则需要在该目录下配置,配置方法是在目录下新建elementui.js,并在文件下写入如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> ElementUi <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/display.css'</span></span><br><span class="line">Vue.use(ElementUi);</span><br></pre></td></tr></table></figure><p>同时使用npm安装element-ui插件</p><p>然后在nuxt.config.js文件中进行配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="string">'~/plugins/elementui'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>assets文件用于存放需要被webpack打包的图片和css文件</p><p><strong>注意:在使用路径引入图片时需要在路径前面加上~</strong>,<strong>不然会报错</strong></p><p>store文件夹用于存放vuex文件,在文件夹下新建index.js文件,导出方式大概如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">export const state &#x3D; () &#x3D;&gt;(&#123; </span><br><span class="line">  isLogin: false,</span><br><span class="line">  user:&quot;&quot;</span><br><span class="line">&#125;)  &#x2F;&#x2F;state必须是函数才行</span><br><span class="line"></span><br><span class="line">export const  mutations &#x3D; &#123;</span><br><span class="line">  userStatus(state, flag) &#123;</span><br><span class="line">    state.isLogin &#x3D; flag</span><br><span class="line">  &#125;,</span><br><span class="line">  setuser(state,flag)&#123;</span><br><span class="line">    state.user &#x3D; flag;</span><br><span class="line">    window.$cookies.set(&quot;user_session&quot;,&quot;haslogin&quot;,60 * 60 * 24)</span><br><span class="line">  &#125;,</span><br><span class="line">  getuser(state,flag)&#123;</span><br><span class="line"></span><br><span class="line">   var value &#x3D;  window.$cookies.get(&quot;user_session&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    if(value &#x3D;&#x3D;&#x3D; &quot;haslogin&quot;)&#123;</span><br><span class="line"></span><br><span class="line">      state.isLogin &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> export const actions &#x3D; &#123;</span><br><span class="line">  userLogin(&#123;commit&#125;, flag) &#123;</span><br><span class="line">    commit(&quot;userStatus&quot;, flag)</span><br><span class="line">  &#125;,</span><br><span class="line">  setusername (&#123;commit&#125;,flag)&#123;</span><br><span class="line">    commit(&quot;setuser&quot;,flag)</span><br><span class="line">  &#125;,</span><br><span class="line">  getusername (&#123;commit&#125;,flag)&#123;</span><br><span class="line">    commit(&quot;getuser&quot;,flag)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> export const getters &#x3D; &#123;</span><br><span class="line">  isLogin: state &#x3D;&gt; state.isLogin,</span><br><span class="line">  user:state &#x3D;&gt;state.user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h4><p>nuxt初探先到此,当然还有很多东西没有涉及,像动态路由,中间件的使用,还有vuex项目的使用等等,项目也还没改造完成,所以未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;项目目标&quot;&gt;&lt;a href=&quot;#项目目标&quot; class=&quot;headerlink&quot; title=&quot;项目目标&quot;&gt;&lt;/a&gt;项目目标&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;把我个人博客的前端界面部分使用nuxt框架进行服务端渲染&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>网络io模型</title>
    <link href="http://yoursite.com/2020/04/24/%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/04/24/%E7%BD%91%E7%BB%9Cio%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-04-23T16:18:46.000Z</published>
    <updated>2020-07-06T05:36:03.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="操作系统基本概念"><a href="#操作系统基本概念" class="headerlink" title="操作系统基本概念"></a>操作系统基本概念</h3><p>首先来来说下操作系统，嗯，<strong>操作系统是计算机硬件的管理软件，是对计算机硬件的抽象</strong>，操作系统将应用程序分为用户态和内核态，例如驱动程序就位于内核态，而我们写的一般程序都是用户态，包括web服务器这些，应用程序无法直接操控硬件，只能通过系统调用，通过操作系统驱动io硬件，通过操作系统管理进程。</p><a id="more"></a><p>接下来说下文件的概念，在操作系统中，文件是对i/o的一种抽象，<strong>文件</strong>大体包括三类</p><p><strong>普通的文件</strong>：包括二进制文件和文本文件</p><p><strong>目录</strong>：就是普通文件的一组链表</p><p><strong>套接字文件</strong>:用来与另一个进程进行跨网络通信的文件</p><p>套接字文件就是通常说的socket，还有值得注意的是无论打开什么文件，内核都会返回给应用程序一个<strong>文件描述符</strong>。当关闭文件后，内核释放资源，同时回收文件描述符。</p><h4 id="进程的内存模型"><a href="#进程的内存模型" class="headerlink" title="进程的内存模型"></a>进程的内存模型</h4><p>每个进程都有独立的上下文，它拥有完整的虚拟内存空间。</p><p>CPU执行进程，总是在不断对进程的切换中，这种叫时分复用，而且时间很快，从而让人有一种进程并行的感觉，即单个cpu在一个时刻只能做一件事</p><p><img src="http://image.myblog-tao.cn//234504_kQl5_1403215.png" alt=""></p><h3 id="I-O流程"><a href="#I-O流程" class="headerlink" title="I/O流程"></a>I/O流程</h3><p>说下应用程序读文件的大致流程（写文件也差不多），当一个进程想要向磁盘或者接受网络数据时，它会先发起系统调用（可以通过异常等方式），然后将程序控制权交给操作系统，</p><p>操作系统向指定的文件发起读的操作，返回给程序一个文件操作符，然后接下来就是比较有意思的地方了，因为文件读出来是需要时间的，文件读出来后会存到内核的缓冲区中（DMA），然后中断提醒CPU，CPU再由内核缓冲区读取到用户进程中，在这个过程中，这段时间里，用户进程可以有阻塞，非阻塞，同步，异步各种状态</p><h3 id="linux的I-O模型"><a href="#linux的I-O模型" class="headerlink" title="linux的I/O模型"></a>linux的I/O模型</h3><p>网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。对于一次IO访问（以read举例），数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。所以说，当一个read操作发生时，它会经历两个阶段：</p><p>第一阶段：等待数据准备 (Waiting for the data to be ready)。  第二阶段：将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)。  </p><p>对于socket流而言，</p><p>第一步：通常涉及等待网络上的数据分组到达，然后被复制到内核的某个缓冲区。  第二步：把数据从内核缓冲区复制到应用进程缓冲区。   </p><h4 id="linux的五种网络i-o模型"><a href="#linux的五种网络i-o模型" class="headerlink" title="linux的五种网络i/o模型"></a>linux的五种网络i/o模型</h4><p>同步的概念就是在数据复制到用户进程的这段时间内，用户进程是不干活</p><p>异步是在这段时间内，用户进程会继续执行它后续的工作</p><p>先在同步异步的基础上进行简单的分类</p><p><strong>同步模型（synchronous IO）</strong></p><ul><li>阻塞IO（bloking IO）</li><li>非阻塞IO（non-blocking IO）</li><li>多路复用IO（multiplexing IO）</li><li>信号驱动式IO（signal-driven IO）</li></ul><p><strong>异步IO（asynchronous IO）</strong></p><p>接下来进行分类的介绍</p><h5 id="阻塞I-O"><a href="#阻塞I-O" class="headerlink" title="阻塞I/O"></a>阻塞I/O</h5><p>阻塞i/o就是整个过程用户进程都是阻塞，它发起系统调用后就被挂起了，直到数据被搬运到缓冲区中，然后数据从缓冲区读进用户进程，它才被唤醒，真个过程它都处于挂起状态（什么都不干）</p><p><img src="http://image.myblog-tao.cn//20150405_VKYH.png" alt=""></p><h5 id="非阻塞i-o"><a href="#非阻塞i-o" class="headerlink" title="非阻塞i/o"></a>非阻塞i/o</h5><p>用户进程发起系统调用后，它没有被挂起，而是继续执行，但它要不断轮询看数据是否运到内核了，数据到了内核后，用户进程将数据从内核读取到用户进程</p><p><img src="http://image.myblog-tao.cn//20152818_DXcj.png" alt=""></p><h5 id="多路复用I-O"><a href="#多路复用I-O" class="headerlink" title="多路复用I/O"></a>多路复用I/O</h5><p>多路复用I/O比较复杂，它整个过程也是阻塞的，但不同的是它可以阻塞多个i/o，同时阻塞多个socket连接，有epoll,，poll,select等，epoll是linux最高效的，<strong>多路复用的特点是通过一种机制一个进程能同时等待多个IO文件描述符，内核监视这些文件描述符（套接字描述符），其中的任意一个进入读就绪状态，select， poll，epoll函数就可以返回。</strong></p><p>select,poll,epoll都是内核状态的函数调用</p><p><strong>用户进程发起系统调用后，处于挂起状态，同时监听多个socket连接，只要有其中有一个数据到达内核，用户进程就被唤醒工作，然后将数据从内核读取到用户进程，其实就是由epoll，select同时监听多个io对象，当io对象发生变化的时候，就通知用户进程读写数据，进行操作</strong></p><p>即多个io对象复用一个进程，这样可以很充分的利用阻塞的这段时间</p><p>IO多路复用是同步阻塞模式</p><p><img src="http://image.myblog-tao.cn//20164149_LD8E.png" alt=""></p><h5 id="异步驱动I-O"><a href="#异步驱动I-O" class="headerlink" title="异步驱动I/O"></a>异步驱动I/O</h5><p><img src="http://image.myblog-tao.cn//20175459_gtgw.png" alt=""></p><p>这个理论上是最好的，但在linux系统中很难实现</p><h5 id="信号驱动i-o"><a href="#信号驱动i-o" class="headerlink" title="信号驱动i/o"></a>信号驱动i/o</h5><p><img src="http://image.myblog-tao.cn//21091434_DsZb.png" alt=""></p><p>这个很少使用到</p><h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><p>异步io在linux中很难实现，但也有一种模拟异步io的方法即多线程和同步阻塞io进行模拟，设置一个主线程，用其它线程进行同步io操作，当io完成时通知主线程去读取进程中的数据，进行后续操作，因为是同一个进程，所以可以共享内存资源。进而实现类似异步io的效果，在linux中有libev,libeio这样的异步io实现库，而在windows，则使用了iocp,可以说异步io的核心就是在子线程上执行io操作，在执行完毕后通知调用者提取相关数据。只不过linux是用户层的线程池，而iocp是内核的线程池。</p><h4 id="Node模型"><a href="#Node模型" class="headerlink" title="Node模型"></a>Node模型</h4><p>首先说下常见的模型要么是单进程多线程，要么是多进程单线程，node是属于后者</p><p><img src="http://image.myblog-tao.cn//849589-20170709225535712-2041092305.png" alt=""></p><p>node中最重的就是包含了libuv这个，node的所有io操作都是通过它来实现的，libuv实现了异步IO，libuv中包含一个事件队列（可以理解为就是主线程），如果是网络io，它会使用epoll这种io多路复用的方式(在linux中)对io进行处理，而对于磁盘的io操作，它会采用多线程+阻塞io的方式进行io操作，它读写完数据后就将数据返回给js引擎。从而实现io操作。</p><p>最后提一点epoll这种io多路复用模型使用的很广，redis,nginx,都不同程度使用了它，它2者也可以归为多进程单线程这种模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作系统基本概念&quot;&gt;&lt;a href=&quot;#操作系统基本概念&quot; class=&quot;headerlink&quot; title=&quot;操作系统基本概念&quot;&gt;&lt;/a&gt;操作系统基本概念&lt;/h3&gt;&lt;p&gt;首先来来说下操作系统，嗯，&lt;strong&gt;操作系统是计算机硬件的管理软件，是对计算机硬件的抽象&lt;/strong&gt;，操作系统将应用程序分为用户态和内核态，例如驱动程序就位于内核态，而我们写的一般程序都是用户态，包括web服务器这些，应用程序无法直接操控硬件，只能通过系统调用，通过操作系统驱动io硬件，通过操作系统管理进程。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ejs的简单使用</title>
    <link href="http://yoursite.com/2020/03/24/ejs%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/24/ejs%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-24T15:51:54.000Z</published>
    <updated>2020-03-25T03:06:32.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>ejs是node的服务端渲染引擎,和art-template,jade差不多,实现功能就大致相当于jsp,虽然现在提倡前后端分离,但服务端渲染还是有它的优点的,最主要的一点当然就是便利于seo,搜索引擎的抓取.所以这篇博客将从几个方面来简单介绍下ejs的使用</strong></p><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量嵌套于html模板之中<P><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%&#x3D; title %&gt;  &#x2F;&#x2F;在koa中可以配合ctx的render方法进行渲染</span><br></pre></td></tr></table></figure><p>在模板中定义的变量都需要render函数中对应名称的变量进行渲染,如果想要定义了不渲染,可以使用<p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D; locals.name %&gt; &#x2F;&#x2F;这样没有传也不会报错</span><br></pre></td></tr></table></figure><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt; </span><br><span class="line"></span><br><span class="line">&lt;%  if (isMe) &#123; %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h4 id="组价"><a href="#组价" class="headerlink" title="组价"></a>组价</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 将变量传给引用的ejs文件</span><br><span class="line">&lt;%- include(&#39;&#x2F;文件名.ejs&#39;,&#123;</span><br><span class="line">    isMe</span><br><span class="line">&#125;)%&gt;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;% List.forEach((item)&#x3D;&gt;&#123; %&gt;</span><br><span class="line">    &lt;li&gt;&lt;%&#x3D; item.name %&gt;&lt;&#x2F;li&gt; </span><br><span class="line">&lt;% &#125;) %&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><h4 id="执行js脚本"><a href="#执行js脚本" class="headerlink" title="执行js脚本"></a>执行js脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    console.log(&#39;100)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>ejs初探就到这里了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ejs是node的服务端渲染引擎,和art-template,jade差不多,实现功能就大致相当于jsp,虽然现在提倡前后端分离,但服务端渲染还是有它的优点的,最主要的一点当然就是便利于seo,搜索引擎的抓取.所以这篇博客将从几个方面来简单介绍下ejs的使用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>git的commit日志基本规范</title>
    <link href="http://yoursite.com/2020/03/24/git%E7%9A%84commit%E6%97%A5%E5%BF%97%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2020/03/24/git%E7%9A%84commit%E6%97%A5%E5%BF%97%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/</id>
    <published>2020-03-24T14:50:53.000Z</published>
    <updated>2020-03-24T15:35:47.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git-commit日志基本规范"><a href="#git-commit日志基本规范" class="headerlink" title="git commit日志基本规范"></a>git commit日志基本规范</h3><p>利用git的commit指令提交代码我想大家都知道,但是git的commit的日志内容其实也是有所讲究的,为了更好的维护代码,应该提升git的commit日志信息的可读性,这样可以方便以后更好的查看提交的代码记录,也方便更好的维护代码,所以有良好的代码日志规范也是很重要的<p><a id="more"></a><h4 id="git的日志格式"><a href="#git的日志格式" class="headerlink" title="git的日志格式"></a>git的日志格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;BLANK LINE&gt;</span><br><span class="line">&lt;footer&gt;</span><br></pre></td></tr></table></figure><h4 id="type详解"><a href="#type详解" class="headerlink" title="type详解"></a>type详解</h4><p> type表示某次提交的类型,比如是修复一个bug还是增加一个新的功能,type的类型如下:</p><ul><li>feat 表示新增功能</li><li>fix 修复bug</li><li>docs 仅仅修复了bug文档,例如readme这些文档</li><li>style 修改了样式,但不改变代码的逻辑</li><li>refactor 代码重构,没有新增功能,也没有修改bug</li><li>pref 优化相关,比如提升性能,体验</li><li>test 测试用例,例如单元测试,集成测试</li><li>chore 改变构建流程,或者添加依赖库和工具</li><li>revert 回滚到上一个版本</li></ul><h4 id="其它部分解释"><a href="#其它部分解释" class="headerlink" title="其它部分解释"></a>其它部分解释</h4><p><strong>标题行</strong></p><p>50个字符以内，描述主要变更内容</p><p><strong>主体内容</strong></p><p>更详细的说明文本，建议72个字符以内</p><p><strong>尾部</strong></p><p>如果需要的化可以添加一个链接到issue地址或者其它文档，或者关闭某个issue</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git-commit日志基本规范&quot;&gt;&lt;a href=&quot;#git-commit日志基本规范&quot; class=&quot;headerlink&quot; title=&quot;git commit日志基本规范&quot;&gt;&lt;/a&gt;git commit日志基本规范&lt;/h3&gt;&lt;p&gt;利用git的commit指令提交代码我想大家都知道,但是git的commit的日志内容其实也是有所讲究的,为了更好的维护代码,应该提升git的commit日志信息的可读性,这样可以方便以后更好的查看提交的代码记录,也方便更好的维护代码,所以有良好的代码日志规范也是很重要的&lt;p&gt;
    
    </summary>
    
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JSDoc的使用</title>
    <link href="http://yoursite.com/2020/03/24/JSDoc%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2020/03/24/JSDoc%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-24T08:32:31.000Z</published>
    <updated>2020-04-23T16:34:09.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSDoc作用"><a href="#JSDoc作用" class="headerlink" title="JSDoc作用"></a><code>JSDoc</code>作用</h3><p>我们都知道js是门弱类型的语言,所以,为了增强代码的可读性,提高js的代码规范,可以选择使用JSDoc进行代码的注释,有了更多类型描述,例如参数类型,函数的返回值类型等等这些的类型描述,在进行开发时会带来很大的便捷,在这基础上稍做扩展,就可以用于代码提示和语法分析,同时JSDoc也可以导出API文档<p><h3 id="了解基础的JSDoc的使用"><a href="#了解基础的JSDoc的使用" class="headerlink" title="了解基础的JSDoc的使用"></a>了解基础的<code>JSDoc</code>的使用</h3><p>对于复杂的JSDoc的使用,本文就不做介绍了,这里推荐下可以使用Vs code 的插件 Document This , 利用它可以快速生成注释 .本文的主要目的是想要介绍些入门的基础JSDoc 使用语法<a id="more"></a><p><h4 id="标签的使用"><a href="#标签的使用" class="headerlink" title="标签的使用"></a>标签的使用</h4><p>通过书写标签,对js解析引擎确定变量类型有一定的帮助<p><table><thead><tr><th>标签</th><th>介绍</th><th>使用</th></tr></thead><tbody><tr><td>alias</td><td>给一个变量或者函数指定一个别名，代码提示时会提示该别名</td><td><code>@alias aliasName</code></td></tr><tr><td>constructor</td><td>使用@constructor可以标识一个函数是构造函数</td><td><code>@constructor</code></td></tr><tr><td>description</td><td>使用@description可以在代码提示时显示被描述变量或者函数的描述信息</td><td><code>@description 描述内容</code></td></tr><tr><td>example</td><td>使用@example可以提示代码示例。</td><td><code>@example 示例内容</code></td></tr><tr><td>extends</td><td>使用@extends用于标识继承于某个类型</td><td><code>@extends {Type}</code></td></tr><tr><td>param</td><td>使用@param可以描述一个函数的参数以及参数类型</td><td>`@param {Type[,Type,…]} ParameterName=[Value1</td></tr><tr><td>property</td><td>使用@property可以描述一个对象的属性</td><td><code>@property {Type[,Type,...]} propertyName 属性描述</code></td></tr><tr><td>return</td><td>使用@return可以描述一个对象的属性</td><td><code>@return {Type[,Type,...]}</code></td></tr><tr><td>type</td><td>使用@type可以定义某个变量的类型</td><td><code>@type {Type[,Type,...]}</code></td></tr></tbody></table><h4 id="标签的代码示例"><a href="#标签的代码示例" class="headerlink" title="标签的代码示例"></a>标签的代码示例</h4><h5 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class Animal &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @description 这是一个构造函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @example </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * var animal &#x3D; new Animal(&#39;恐龙&#39;,1000);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @constructor</span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line">    constructor(name,weight)&#123;</span><br><span class="line"></span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line"></span><br><span class="line">       this.weight &#x3D; weight;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    say()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @extends &#123;Animal&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    </span><br><span class="line">    constructor(name,weight)&#123;</span><br><span class="line">        super(name,weight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    say ()&#123;</span><br><span class="line"></span><br><span class="line">        console.log(this.name+&quot;:wang wang wang ...&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="param"><a href="#param" class="headerlink" title="param"></a>param</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * 这是一个方法描述</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @param &#123;String&#125; method &#x3D; [get|post] 可选值域包括get和post，get是直接请求，post是提交数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Request(method) &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="return"><a href="#return" class="headerlink" title="return"></a>return</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @return &#123;HTMLDocument&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getDocument() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;some code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="property"><a href="#property" class="headerlink" title="property"></a>property</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @property &#123;IDString&#125; id id元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @property &#123;ClassString&#125; classNames class样式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var htmlOptions &#x3D; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    id:null,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    classNames:null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlOptions.id &#x3D; &quot;123&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlOptions.classNames &#x3D; &quot;arrow area&quot;</span><br></pre></td></tr></table></figure><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @type &#123;IDString&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var htmlId &#x3D; null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmlId &#x3D; &quot;123&quot;;</span><br></pre></td></tr></table></figure><h4 id="类型语法"><a href="#类型语法" class="headerlink" title="类型语法"></a>类型语法</h4><h5 id="单一类型"><a href="#单一类型" class="headerlink" title="单一类型"></a>单一类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这里定义一个类型为Document的变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @type &#123;Document&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var foo &#x3D; null;</span><br></pre></td></tr></table></figure><h5 id="多个类型"><a href="#多个类型" class="headerlink" title="多个类型"></a>多个类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这里定义一个类型为Document,HTMLElement的变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @type &#123;Document,HTMLElement&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var foo &#x3D; null;</span><br></pre></td></tr></table></figure><h5 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这里定义一个参数为Event的回调函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @param &#123;Function(Event)&#125; callback</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function testCallBack(callback)&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;这里定义一个返回类型是参数为IDString返回值为HTMLElement的函数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * @return &#123;Function(IDString):HTMLElement&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function testFunctionReturn()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    return foo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var rFunc &#x3D; testFunctionReturn();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rFunc(&#39;id&#39;).getElementsByClassName(&#39;classA&#39;);</span><br></pre></td></tr></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>本文的绝大部分借鉴了html5plus官网上的这篇 <a href="https://www.html5plus.org/doc/jsdocp.html" target="_blank" rel="noopener">文章</a>,更多详细信息可以去查看JSDoc的<a href="https://www.html.cn/doc/jsdoc/index.html" target="_blank" rel="noopener">官方文档</a>,本文只做个入门的参考</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JSDoc作用&quot;&gt;&lt;a href=&quot;#JSDoc作用&quot; class=&quot;headerlink&quot; title=&quot;JSDoc作用&quot;&gt;&lt;/a&gt;&lt;code&gt;JSDoc&lt;/code&gt;作用&lt;/h3&gt;&lt;p&gt;我们都知道js是门弱类型的语言,所以,为了增强代码的可读性,提高js的代码规范,可以选择使用JSDoc进行代码的注释,有了更多类型描述,例如参数类型,函数的返回值类型等等这些的类型描述,在进行开发时会带来很大的便捷,在这基础上稍做扩展,就可以用于代码提示和语法分析,同时JSDoc也可以导出API文档&lt;p&gt;

&lt;h3 id=&quot;了解基础的JSDoc的使用&quot;&gt;&lt;a href=&quot;#了解基础的JSDoc的使用&quot; class=&quot;headerlink&quot; title=&quot;了解基础的JSDoc的使用&quot;&gt;&lt;/a&gt;了解基础的&lt;code&gt;JSDoc&lt;/code&gt;的使用&lt;/h3&gt;&lt;p&gt;对于复杂的JSDoc的使用,本文就不做介绍了,这里推荐下可以使用Vs code 的插件 Document This , 利用它可以快速生成注释 .本文的主要目的是想要介绍些入门的基础JSDoc 使用语法
    
    </summary>
    
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用步骤</title>
    <link href="http://yoursite.com/2020/01/22/hello-world/"/>
    <id>http://yoursite.com/2020/01/22/hello-world/</id>
    <published>2020-01-22T14:43:19.068Z</published>
    <updated>2020-04-23T16:26:51.281Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
